{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home CardinalEngine and DeusFramework are documented together due to DeusFramework being a submodule of CardinalEngine and is expected to be used with CardinalEngine however can still be used independently. CardinalEngine CardinalEngine is built off of DeusFramework and is designed to streamline the development process. Features Custom characters that do not utilize Humanoids. Credit to Luanoid for physics calculations. Credit to Dogutsune for skinned R15 rig used as the standard character model. Job service for multithreading Extensions to the table, math, and raycast functions DeusFramework DeusFramework is a standalone object-oriented framework for Roblox Luau.","title":"Home"},{"location":"#home","text":"CardinalEngine and DeusFramework are documented together due to DeusFramework being a submodule of CardinalEngine and is expected to be used with CardinalEngine however can still be used independently.","title":"Home"},{"location":"#cardinalengine","text":"CardinalEngine is built off of DeusFramework and is designed to streamline the development process.","title":"CardinalEngine"},{"location":"#features","text":"Custom characters that do not utilize Humanoids. Credit to Luanoid for physics calculations. Credit to Dogutsune for skinned R15 rig used as the standard character model. Job service for multithreading Extensions to the table, math, and raycast functions","title":"Features"},{"location":"#deusframework","text":"DeusFramework is a standalone object-oriented framework for Roblox Luau.","title":"DeusFramework"},{"location":"snippets/","text":"Snippets VSCode snippets for quickly setting up modules that conform with Cardinal and Deus's internal module layout Prefix Description @class Formats a class module @classSimple Formats a class module that has no events, less configuration, and all properties are read & write @service Formats a service module @module Formats a module assert Runs Output.assert() error Runs Output.error() warn Runs Output.warn()","title":"Snippets"},{"location":"snippets/#snippets","text":"VSCode snippets for quickly setting up modules that conform with Cardinal and Deus's internal module layout Prefix Description @class Formats a class module @classSimple Formats a class module that has no events, less configuration, and all properties are read & write @service Formats a service module @module Formats a module assert Runs Output.assert() error Runs Output.error() warn Runs Output.warn()","title":"Snippets"},{"location":"CardinalEngine/characters/","text":"Characters WIP Modern implementation of Luanoid","title":"Characters"},{"location":"CardinalEngine/characters/#characters","text":"WIP Modern implementation of Luanoid","title":"Characters"},{"location":"CardinalEngine/usage/","text":"Usage Getting Loader Cardinal by default provides only one way of getting the module loader when not loading from Cardinal's designated folder for modules Loading from Shared This method works when it is known that Cardinal is done loading and the script does not need to yield. local Cardinal = shared . Cardinal Getting & Registering Modules Refer to DeusFramework Usage","title":"Usage"},{"location":"CardinalEngine/usage/#usage","text":"","title":"Usage"},{"location":"CardinalEngine/usage/#getting-loader","text":"Cardinal by default provides only one way of getting the module loader when not loading from Cardinal's designated folder for modules Loading from Shared This method works when it is known that Cardinal is done loading and the script does not need to yield. local Cardinal = shared . Cardinal","title":"Getting Loader"},{"location":"CardinalEngine/usage/#getting-registering-modules","text":"Refer to DeusFramework Usage","title":"Getting &amp; Registering Modules"},{"location":"CardinalEngine/Modules/ordinal/","text":"Ordinal","title":"Ordinal"},{"location":"CardinalEngine/Modules/ordinal/#ordinal","text":"","title":"Ordinal"},{"location":"CardinalEngine/Modules/shapes/","text":"Shapes","title":"Shapes"},{"location":"CardinalEngine/Modules/shapes/#shapes","text":"","title":"Shapes"},{"location":"DeusFramework/usage/","text":"Usage Getting Loader Deus by default provides 2 ways of getting the module loader. Loading from Shared This method works when it is known that Deus is done loading and the script does not need to yield. local Deus = shared . Deus Loading from ReplicatedStorage This method is reccomended when a script needs to access Deus at the start of the game. local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) Getting modules Deus provides 2 ways of getting modules. The first is to use the loader obtained from the steps above, the second is accessible only from a ModuleScript loaded by Deus. Both use the Load() method. Loading modules from Shared or ReplicatedStorage This should only be used in Scripts or LocalScripts local BaseObject = Deus : Load ( \"Deus.BaseObject\" ) Loading modules from ModuleScript This should be the primary method in loading modules local BaseObject local Output local StringUtils local Module = {} function Module . start () BaseObject = Module : Load ( \"Deus.BaseObject\" ) Output = Module : Load ( \"Deus.Output\" ) StringUtils = Module : Load ( \"Deus.StringUtils\" ) end return Module Registering modules To register or add your own modules to Deus that can be loaded globally later use the Register() method. Here's an example of a module tree. script - module1 - submodule1 - module2 - module3 Deus : Register ( script , \"myModuleName\" ) To load your modules you would use the path with the module name specified earlier. Info By default Deus will not be able to load submodule1 in the tree as it will ignore submodules. local module1 = Deus : Load ( \"myModuleName.module1\" ) local module2 = Deus : Load ( \"myModuleName.module2\" ) local module3 = Deus : Load ( \"myModuleName.module3\" ) -- These will not work! local submodule1 = Deus : Load ( \"myModuleName.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1\" ). submodule1","title":"Usage"},{"location":"DeusFramework/usage/#usage","text":"","title":"Usage"},{"location":"DeusFramework/usage/#getting-loader","text":"Deus by default provides 2 ways of getting the module loader. Loading from Shared This method works when it is known that Deus is done loading and the script does not need to yield. local Deus = shared . Deus Loading from ReplicatedStorage This method is reccomended when a script needs to access Deus at the start of the game. local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" ))","title":"Getting Loader"},{"location":"DeusFramework/usage/#getting-modules","text":"Deus provides 2 ways of getting modules. The first is to use the loader obtained from the steps above, the second is accessible only from a ModuleScript loaded by Deus. Both use the Load() method. Loading modules from Shared or ReplicatedStorage This should only be used in Scripts or LocalScripts local BaseObject = Deus : Load ( \"Deus.BaseObject\" ) Loading modules from ModuleScript This should be the primary method in loading modules local BaseObject local Output local StringUtils local Module = {} function Module . start () BaseObject = Module : Load ( \"Deus.BaseObject\" ) Output = Module : Load ( \"Deus.Output\" ) StringUtils = Module : Load ( \"Deus.StringUtils\" ) end return Module","title":"Getting modules"},{"location":"DeusFramework/usage/#registering-modules","text":"To register or add your own modules to Deus that can be loaded globally later use the Register() method. Here's an example of a module tree. script - module1 - submodule1 - module2 - module3 Deus : Register ( script , \"myModuleName\" ) To load your modules you would use the path with the module name specified earlier. Info By default Deus will not be able to load submodule1 in the tree as it will ignore submodules. local module1 = Deus : Load ( \"myModuleName.module1\" ) local module2 = Deus : Load ( \"myModuleName.module2\" ) local module3 = Deus : Load ( \"myModuleName.module3\" ) -- These will not work! local submodule1 = Deus : Load ( \"myModuleName.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1\" ). submodule1","title":"Registering modules"},{"location":"DeusFramework/Classes/PID/","text":"PID No Inheritance This object is a simple metatable and is not inherited from BaseObject . Instructions to tune can be found here . Creating local PID = Deus : Load ( \"Deus.PID\" ) local pid = PID . new ( kP , kI , kD , desiredValue , bias ) Usage local error = pid : Update ( actualValue ) Properties Type Name number KP number KI number KD number DesiredValue number Bias number _lastUpdate number _errorPrior number _integralPrior","title":"PID"},{"location":"DeusFramework/Classes/PID/#pid","text":"No Inheritance This object is a simple metatable and is not inherited from BaseObject . Instructions to tune can be found here .","title":"PID"},{"location":"DeusFramework/Classes/PID/#creating","text":"local PID = Deus : Load ( \"Deus.PID\" ) local pid = PID . new ( kP , kI , kD , desiredValue , bias )","title":"Creating"},{"location":"DeusFramework/Classes/PID/#usage","text":"local error = pid : Update ( actualValue )","title":"Usage"},{"location":"DeusFramework/Classes/PID/#properties","text":"Type Name number KP number KI number KD number DesiredValue number Bias number _lastUpdate number _errorPrior number _integralPrior","title":"Properties"},{"location":"DeusFramework/Classes/baseObject/","text":"BaseObject Objects that require permissions, replication across client-server boundary, change detection, or inheritance are inherited from the BaseObject. If an object does not require these it is reccomended to use a simple metatable as a object. Permissions Internal Access Internal access refers to direct access to the object's metatable which provides the ability to read and write to all properties. External Access External access refers to access only to the object's proxy which provides limited access. Usage Creating a new class All arguments are optional If a ClassName is not provided a randomly generated ClassName will be assigned Certain method and event names are reserved and will be overwritten if used If \"Changed\" is included in the Events table then the BaseObject will fire the event when a property change is detected Type Property Description string ClassName Name of class boolean Extendable If object can be inherited from boolean Replicable If object can be replicated from function Constructor Function ran after object is made and before object is returned function Deconstructor Function ran after before object is destroyed table Methods List of class methods table Events List of class events table PrivateProperties List of properties only accessible with internal access table PublicReadOnlyProperties List of properties only readable with external access table PublicReadAndWriteProperties List of properties read and writable with external access Snippets Regular local myClass = {} myClass . ClassName = \"myClass\" myClass . Extendable = true myClass . Replicable = true myClass . Methods = {} myClass . Events = {} function myClass : Constructor ( part ) self . foo = part end function myClass : Deconstructor () self . foo : Destroy () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end return myClass Simple local myClass = {} myClass . ClassName = \"myClass\" function myClass : Constructor () end function myClass : Deconstructor () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) -- Property assignment should occur here myClass . foo = None return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass Creating a new object local myObject = myClass . new ( Instance . new ( \"Part\" )) Representing nil To represet nil in object properties use the Symbol None function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end Using superclasses Objects with a superclass inherit the methods of its superclass. Be sure to have all the properties the inherited functions need to run as properties are not automatically inherited. local myClass = {} myClass . ClassName = \"myClass\" function myClass . start () -- New class inherited from Deus.RemoteEvent myClass . Superclass = myClass : Load ( \"Deus.RemoteEvent\" ) return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass Reading and writing with Internal access Warning This is not guaranteed to work in future versions as this is reading and writing directly to the object's TableProxy which is subject to internal change. To optimize reading and writing properties with internal access the object's TableProxy can be accessed directly to avoid invoking any metatable methods. Due to this not invoking any metatable methods the Changed event will not fire with changes made via this method. local ClassName = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . ClassName local Extendable = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . Extendable local Replicable = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . Replicable local Methods = myObject . Internal . DEUSOBJECT_LockedTables . Methods local Events = myObject . Internal . DEUSOBJECT_LockedTables . Events local PrivateProperties = myObject . Internal . DEUSOBJECT_Properties local PublicReadOnlyProperties = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties local PublicReadAndWriteProperties = myObject . Internal . DEUSOBJECT_LockedTables . ReadAndWriteProperties PrivateProperties . foo = \"bar3\" Inherited methods FireEvent Internal Access Required myObject : FireEvent ( \"myEvent\" , ...) GetPropertyChangedSignal Info Cannot hook to properties of PrivateProperties myObject : GetPropertyChangedSignal ( \"foo\" ): Connect ( function ( newProperty , oldProperty ) end ) GetMethods myObject : GetMethods () GetEvents myObject : Events () GetReadableProperties Returns PublicReadOnlyProperties and PublicReadAndWriteProperties myObject : GetReadableProperties () GetWritableProperties Returns PublicReadAndWriteProperties myObject : GetWritableProperties () Serialize myObject : Serialize () Hash myObject : Hash () Replicate Internal Access Required All object properties that are valid attribute values are replicated to the instance. Non-valid properties are skipped. myObject : Replicate ( workspace . Baseplate ) Properties Permission Type Name Description ReadOnly String ClassName Name of class ReadOnly String Superclass Class object is extended from ReadOnly Boolean Extendable If object can be inherited from ReadOnly Boolean Replicable If object can be replicated ReadOnly String ObjectId UUID of object ReadOnly Number TickCreated Time object was created (On objects replicated across server/client boundary the time will be in server time) ReadOnly Instance ReplicationTarget Instance object is being replicated to ReadOnly userdata Proxy Object's proxy limited to external access (Inherited from TableProxy )","title":"BaseObject"},{"location":"DeusFramework/Classes/baseObject/#baseobject","text":"Objects that require permissions, replication across client-server boundary, change detection, or inheritance are inherited from the BaseObject. If an object does not require these it is reccomended to use a simple metatable as a object. Permissions Internal Access Internal access refers to direct access to the object's metatable which provides the ability to read and write to all properties. External Access External access refers to access only to the object's proxy which provides limited access.","title":"BaseObject"},{"location":"DeusFramework/Classes/baseObject/#usage","text":"Creating a new class All arguments are optional If a ClassName is not provided a randomly generated ClassName will be assigned Certain method and event names are reserved and will be overwritten if used If \"Changed\" is included in the Events table then the BaseObject will fire the event when a property change is detected Type Property Description string ClassName Name of class boolean Extendable If object can be inherited from boolean Replicable If object can be replicated from function Constructor Function ran after object is made and before object is returned function Deconstructor Function ran after before object is destroyed table Methods List of class methods table Events List of class events table PrivateProperties List of properties only accessible with internal access table PublicReadOnlyProperties List of properties only readable with external access table PublicReadAndWriteProperties List of properties read and writable with external access Snippets Regular local myClass = {} myClass . ClassName = \"myClass\" myClass . Extendable = true myClass . Replicable = true myClass . Methods = {} myClass . Events = {} function myClass : Constructor ( part ) self . foo = part end function myClass : Deconstructor () self . foo : Destroy () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end return myClass Simple local myClass = {} myClass . ClassName = \"myClass\" function myClass : Constructor () end function myClass : Deconstructor () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) -- Property assignment should occur here myClass . foo = None return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass","title":"Usage"},{"location":"DeusFramework/Classes/baseObject/#creating-a-new-object","text":"local myObject = myClass . new ( Instance . new ( \"Part\" ))","title":"Creating a new object"},{"location":"DeusFramework/Classes/baseObject/#representing-nil","text":"To represet nil in object properties use the Symbol None function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). new ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end","title":"Representing nil"},{"location":"DeusFramework/Classes/baseObject/#using-superclasses","text":"Objects with a superclass inherit the methods of its superclass. Be sure to have all the properties the inherited functions need to run as properties are not automatically inherited. local myClass = {} myClass . ClassName = \"myClass\" function myClass . start () -- New class inherited from Deus.RemoteEvent myClass . Superclass = myClass : Load ( \"Deus.RemoteEvent\" ) return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass","title":"Using superclasses"},{"location":"DeusFramework/Classes/baseObject/#reading-and-writing-with-internal-access","text":"Warning This is not guaranteed to work in future versions as this is reading and writing directly to the object's TableProxy which is subject to internal change. To optimize reading and writing properties with internal access the object's TableProxy can be accessed directly to avoid invoking any metatable methods. Due to this not invoking any metatable methods the Changed event will not fire with changes made via this method. local ClassName = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . ClassName local Extendable = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . Extendable local Replicable = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties . Replicable local Methods = myObject . Internal . DEUSOBJECT_LockedTables . Methods local Events = myObject . Internal . DEUSOBJECT_LockedTables . Events local PrivateProperties = myObject . Internal . DEUSOBJECT_Properties local PublicReadOnlyProperties = myObject . Internal . DEUSOBJECT_LockedTables . ReadOnlyProperties local PublicReadAndWriteProperties = myObject . Internal . DEUSOBJECT_LockedTables . ReadAndWriteProperties PrivateProperties . foo = \"bar3\"","title":"Reading and writing with Internal access"},{"location":"DeusFramework/Classes/baseObject/#inherited-methods","text":"","title":"Inherited methods"},{"location":"DeusFramework/Classes/baseObject/#fireevent","text":"Internal Access Required myObject : FireEvent ( \"myEvent\" , ...)","title":"FireEvent"},{"location":"DeusFramework/Classes/baseObject/#getpropertychangedsignal","text":"Info Cannot hook to properties of PrivateProperties myObject : GetPropertyChangedSignal ( \"foo\" ): Connect ( function ( newProperty , oldProperty ) end )","title":"GetPropertyChangedSignal"},{"location":"DeusFramework/Classes/baseObject/#getmethods","text":"myObject : GetMethods ()","title":"GetMethods"},{"location":"DeusFramework/Classes/baseObject/#getevents","text":"myObject : Events ()","title":"GetEvents"},{"location":"DeusFramework/Classes/baseObject/#getreadableproperties","text":"Returns PublicReadOnlyProperties and PublicReadAndWriteProperties myObject : GetReadableProperties ()","title":"GetReadableProperties"},{"location":"DeusFramework/Classes/baseObject/#getwritableproperties","text":"Returns PublicReadAndWriteProperties myObject : GetWritableProperties ()","title":"GetWritableProperties"},{"location":"DeusFramework/Classes/baseObject/#serialize","text":"myObject : Serialize ()","title":"Serialize"},{"location":"DeusFramework/Classes/baseObject/#hash","text":"myObject : Hash ()","title":"Hash"},{"location":"DeusFramework/Classes/baseObject/#replicate","text":"Internal Access Required All object properties that are valid attribute values are replicated to the instance. Non-valid properties are skipped. myObject : Replicate ( workspace . Baseplate )","title":"Replicate"},{"location":"DeusFramework/Classes/baseObject/#properties","text":"Permission Type Name Description ReadOnly String ClassName Name of class ReadOnly String Superclass Class object is extended from ReadOnly Boolean Extendable If object can be inherited from ReadOnly Boolean Replicable If object can be replicated ReadOnly String ObjectId UUID of object ReadOnly Number TickCreated Time object was created (On objects replicated across server/client boundary the time will be in server time) ReadOnly Instance ReplicationTarget Instance object is being replicated to ReadOnly userdata Proxy Object's proxy limited to external access (Inherited from TableProxy )","title":"Properties"},{"location":"DeusFramework/Classes/bindableEvent/","text":"BindableEvent Inherited from BaseObject The event Changed is not inherited as a special exception due to BindableEvent being the event An event object that behaves more similar to a Roblox object's event. This implementation also allows userdata types often made from newproxy() to be sent as arguments. Creating local bindableEvent = Deus : Load ( \"Deus.BindableEvent\" ). new () Methods Name Arguments Returns Internal Fire tuple Arguments void Connect function Callback tuple Arguments Wait void tuple Arguments Properties Permission Type Name Description Private Instance RBXEvent BindableEvent used to wrap ReadOnly Number LastFiredTick Time the event was last fired","title":"BindableEvent"},{"location":"DeusFramework/Classes/bindableEvent/#bindableevent","text":"Inherited from BaseObject The event Changed is not inherited as a special exception due to BindableEvent being the event An event object that behaves more similar to a Roblox object's event. This implementation also allows userdata types often made from newproxy() to be sent as arguments.","title":"BindableEvent"},{"location":"DeusFramework/Classes/bindableEvent/#creating","text":"local bindableEvent = Deus : Load ( \"Deus.BindableEvent\" ). new ()","title":"Creating"},{"location":"DeusFramework/Classes/bindableEvent/#methods","text":"Name Arguments Returns Internal Fire tuple Arguments void Connect function Callback tuple Arguments Wait void tuple Arguments","title":"Methods"},{"location":"DeusFramework/Classes/bindableEvent/#properties","text":"Permission Type Name Description Private Instance RBXEvent BindableEvent used to wrap ReadOnly Number LastFiredTick Time the event was last fired","title":"Properties"},{"location":"DeusFramework/Classes/inputAction/","text":"InputAction","title":"InputAction"},{"location":"DeusFramework/Classes/inputAction/#inputaction","text":"","title":"InputAction"},{"location":"DeusFramework/Classes/proximityDetector/","text":"ProximityDetector","title":"ProximityDetector"},{"location":"DeusFramework/Classes/proximityDetector/#proximitydetector","text":"","title":"ProximityDetector"},{"location":"DeusFramework/Classes/remoteEvent/","text":"RemoteEvent Inherited from BaseObject Provides easier control over sending data to clients. Should primarily be accessed from NetworkService . Creating local remoteEvent = Deus : Load ( \"Deus.RemoteEvent\" ). new () Methods Certain methods only exist on the client or server. Server Methods Name Arguments Returns internal FireClient Player Player, tuple Arguments void internal FireClients array Players, tuple Arguments void internal FireAllClients tuple Arguments void internal FireNearbyClients Vector3 Position, Number Radius, tuple Arguments void Listen function Callback RBXScriptConnection Client Methods Name Arguments Returns internal FireServer tuple Arguments void Listen function Callback RBXScriptConnection Properties Permission Type Name Description ReadOnly Number LastSendTick Last time event was fired ReadOnly Number LastReceiveTick Last time event received data","title":"RemoteEvent"},{"location":"DeusFramework/Classes/remoteEvent/#remoteevent","text":"Inherited from BaseObject Provides easier control over sending data to clients. Should primarily be accessed from NetworkService .","title":"RemoteEvent"},{"location":"DeusFramework/Classes/remoteEvent/#creating","text":"local remoteEvent = Deus : Load ( \"Deus.RemoteEvent\" ). new ()","title":"Creating"},{"location":"DeusFramework/Classes/remoteEvent/#methods","text":"Certain methods only exist on the client or server. Server Methods Name Arguments Returns internal FireClient Player Player, tuple Arguments void internal FireClients array Players, tuple Arguments void internal FireAllClients tuple Arguments void internal FireNearbyClients Vector3 Position, Number Radius, tuple Arguments void Listen function Callback RBXScriptConnection Client Methods Name Arguments Returns internal FireServer tuple Arguments void Listen function Callback RBXScriptConnection","title":"Methods"},{"location":"DeusFramework/Classes/remoteEvent/#properties","text":"Permission Type Name Description ReadOnly Number LastSendTick Last time event was fired ReadOnly Number LastReceiveTick Last time event received data","title":"Properties"},{"location":"DeusFramework/Classes/remoteFunction/","text":"RemoteFunction Inherited from BaseObject Serves primarily as a wrapper for NetworkService as this object provides no real advantages over Roblox's RemoteFunction. Creating local remoteFunction = Deus : Load ( \"Deus.RemoteFunction\" ). new () Methods Certain methods only exist on the client or server. Server Methods Name Arguments Returns internal InvokeClient Player Player, tuple Arguments tuple Arguments Listen function Callback RBXScriptConnection Client Methods Name Arguments Returns internal InvokeServer Player Player, tuple Arguments tuple Arguments Listen function Callback RBXScriptConnection","title":"RemoteFunction"},{"location":"DeusFramework/Classes/remoteFunction/#remotefunction","text":"Inherited from BaseObject Serves primarily as a wrapper for NetworkService as this object provides no real advantages over Roblox's RemoteFunction.","title":"RemoteFunction"},{"location":"DeusFramework/Classes/remoteFunction/#creating","text":"local remoteFunction = Deus : Load ( \"Deus.RemoteFunction\" ). new ()","title":"Creating"},{"location":"DeusFramework/Classes/remoteFunction/#methods","text":"Certain methods only exist on the client or server. Server Methods Name Arguments Returns internal InvokeClient Player Player, tuple Arguments tuple Arguments Listen function Callback RBXScriptConnection Client Methods Name Arguments Returns internal InvokeServer Player Player, tuple Arguments tuple Arguments Listen function Callback RBXScriptConnection","title":"Methods"},{"location":"DeusFramework/Classes/Geometry/heightmap/","text":"Heightmap","title":"Heightmap"},{"location":"DeusFramework/Classes/Geometry/heightmap/#heightmap","text":"","title":"Heightmap"},{"location":"DeusFramework/Classes/Geometry/mesh/","text":"Mesh","title":"Mesh"},{"location":"DeusFramework/Classes/Geometry/mesh/#mesh","text":"","title":"Mesh"},{"location":"DeusFramework/Classes/Geometry/wireframe/","text":"Wireframe","title":"Wireframe"},{"location":"DeusFramework/Classes/Geometry/wireframe/#wireframe","text":"","title":"Wireframe"},{"location":"DeusFramework/Libraries/JSON/","text":"JSON Library to expand HttpService's JSON capabilities. Provides support for these data types. Vector2 Vector3 CFrame Color3 BrickColor Loading local JSON = Deus : Load ( \"Deus.JSON\" ) serialize Example Script print ( JSON . serialize ( { a = Vector2 . new ( 3 , 5 ), b = Vector3 . new ( 3 , 5 , 7 ), c = CFrame . new ( 3 , 5 , 7 ), d = Color3 . new ( 1 , 1 , 1 ), e = BrickColor . new ( \"Bright red\" ) } )) Output {\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}} deserialize Example Script print ( JSON . deserialize ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output { a = 3, 5, b = 3, 5, 7, c = 3, 5, 7, d = 1, 1, 1, e = Bright red } isJSON Example Script print ( JSON . isJSON ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output true","title":"JSON"},{"location":"DeusFramework/Libraries/JSON/#json","text":"Library to expand HttpService's JSON capabilities. Provides support for these data types. Vector2 Vector3 CFrame Color3 BrickColor","title":"JSON"},{"location":"DeusFramework/Libraries/JSON/#loading","text":"local JSON = Deus : Load ( \"Deus.JSON\" )","title":"Loading"},{"location":"DeusFramework/Libraries/JSON/#serialize","text":"Example Script print ( JSON . serialize ( { a = Vector2 . new ( 3 , 5 ), b = Vector3 . new ( 3 , 5 , 7 ), c = CFrame . new ( 3 , 5 , 7 ), d = Color3 . new ( 1 , 1 , 1 ), e = BrickColor . new ( \"Bright red\" ) } )) Output {\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}","title":"serialize"},{"location":"DeusFramework/Libraries/JSON/#deserialize","text":"Example Script print ( JSON . deserialize ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output { a = 3, 5, b = 3, 5, 7, c = 3, 5, 7, d = 1, 1, 1, e = Bright red }","title":"deserialize"},{"location":"DeusFramework/Libraries/JSON/#isjson","text":"Example Script print ( JSON . isJSON ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output true","title":"isJSON"},{"location":"DeusFramework/Libraries/adornmentUtils/","text":"AdornmentUtils Valid Classes AdornmentUtils only supports these classes ClassName BoxHandleAdornment ConeHandleAdornment CylinderHandleAdornment LineHandleAdornment SphereHandleAdornment ImageHandleAdornment Usage Argument Description string ClassName ClassName of adornment Instance Parent Parent CFrame CFrame CFrame bool IsWorldSpace If CFrame is WorldSpace, if false and Parent is provided ToObjectSpace() will be used on CFrame table Properties Table of properties Example AdornmentUtils . make ( \"BoxHandleAdornment\" , workspace , CFrame . new (), true , {})","title":"AdornmentUtils"},{"location":"DeusFramework/Libraries/adornmentUtils/#adornmentutils","text":"","title":"AdornmentUtils"},{"location":"DeusFramework/Libraries/adornmentUtils/#valid-classes","text":"AdornmentUtils only supports these classes ClassName BoxHandleAdornment ConeHandleAdornment CylinderHandleAdornment LineHandleAdornment SphereHandleAdornment ImageHandleAdornment","title":"Valid Classes"},{"location":"DeusFramework/Libraries/adornmentUtils/#usage","text":"Argument Description string ClassName ClassName of adornment Instance Parent Parent CFrame CFrame CFrame bool IsWorldSpace If CFrame is WorldSpace, if false and Parent is provided ToObjectSpace() will be used on CFrame table Properties Table of properties Example AdornmentUtils . make ( \"BoxHandleAdornment\" , workspace , CFrame . new (), true , {})","title":"Usage"},{"location":"DeusFramework/Libraries/enumeration/","text":"Enumeration","title":"Enumeration"},{"location":"DeusFramework/Libraries/enumeration/#enumeration","text":"","title":"Enumeration"},{"location":"DeusFramework/Libraries/instanceUtils/","text":"InstanceUtils Loading local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local InstanceUtils = Deus : Load ( \"Deus.InstanceUtils\" ) anchor Recursive anchor function. -- This anchors everything in the workspace InstanceUtils . anchor ( workspace , true ) -- This unanchors everything in the workspace InstanceUtils . anchor ( workspace , false ) getAncestors Returns all ancestors. Example Script print ( InstanceUtils . getAncestors ( workspace . Baseplate )) Output Depending on the name of your studio file it may not appear as \"Baseplate\" { Workspace, Baseplate } findFirstAncestorWithName Returns first ancestor with matching name. Example Script print ( InstanceUtils . findFirstAncestorWithName ( workspace . Baseplate , \"Workspace\" ) == workspace ) Output true findFirstChildNoCase Similar to FindFirstChild but disregards case sensitivity. InstanceUtils . findFirstChildNoCase ( instance , name , recursive ) findFirstChildWithAttribute Similar to FindFirstChild but checks for attributes . InstanceUtils . findFirstChildWithAttribute ( instance , attributeName , recursive ) findFirstAncestorWithAttribute Similar to findFirstChildWithAttribute but checks for ancestors. InstanceUtils . findFirstAncestorWithAttribute ( instance , attributeName ) setAttributes Sets multiple attributes at once. InstanceUtils . setAttributes ( workspace . Baseplate , { attribute1 = true , attribute2 = 2 , attribute3 = \"foobar\" } ) isTypeAttributeSupported Returns if a data type can be set as an attribute. Example Script print ( InstanceUtils . isTypeAttributeSupported ( \"nil\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"string\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"boolean\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"number\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"table\" )) Output true true true true false make Useful for creating lots of instances at once, for only a few instances it is reccomended to use Instance.new() -- Creates a model in workspace named \"Container\" with a 1x1x1 anchored part inside InstanceUtils . make ( { \"Model\" , { Name = \"Container\" }, workspace , { \"Part\" , { Anchored = true , Size = Vector3 . new ( 1 , 1 , 1 ) } } } )","title":"InstanceUtils"},{"location":"DeusFramework/Libraries/instanceUtils/#instanceutils","text":"","title":"InstanceUtils"},{"location":"DeusFramework/Libraries/instanceUtils/#loading","text":"local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local InstanceUtils = Deus : Load ( \"Deus.InstanceUtils\" )","title":"Loading"},{"location":"DeusFramework/Libraries/instanceUtils/#anchor","text":"Recursive anchor function. -- This anchors everything in the workspace InstanceUtils . anchor ( workspace , true ) -- This unanchors everything in the workspace InstanceUtils . anchor ( workspace , false )","title":"anchor"},{"location":"DeusFramework/Libraries/instanceUtils/#getancestors","text":"Returns all ancestors. Example Script print ( InstanceUtils . getAncestors ( workspace . Baseplate )) Output Depending on the name of your studio file it may not appear as \"Baseplate\" { Workspace, Baseplate }","title":"getAncestors"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstancestorwithname","text":"Returns first ancestor with matching name. Example Script print ( InstanceUtils . findFirstAncestorWithName ( workspace . Baseplate , \"Workspace\" ) == workspace ) Output true","title":"findFirstAncestorWithName"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstchildnocase","text":"Similar to FindFirstChild but disregards case sensitivity. InstanceUtils . findFirstChildNoCase ( instance , name , recursive )","title":"findFirstChildNoCase"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstchildwithattribute","text":"Similar to FindFirstChild but checks for attributes . InstanceUtils . findFirstChildWithAttribute ( instance , attributeName , recursive )","title":"findFirstChildWithAttribute"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstancestorwithattribute","text":"Similar to findFirstChildWithAttribute but checks for ancestors. InstanceUtils . findFirstAncestorWithAttribute ( instance , attributeName )","title":"findFirstAncestorWithAttribute"},{"location":"DeusFramework/Libraries/instanceUtils/#setattributes","text":"Sets multiple attributes at once. InstanceUtils . setAttributes ( workspace . Baseplate , { attribute1 = true , attribute2 = 2 , attribute3 = \"foobar\" } )","title":"setAttributes"},{"location":"DeusFramework/Libraries/instanceUtils/#istypeattributesupported","text":"Returns if a data type can be set as an attribute. Example Script print ( InstanceUtils . isTypeAttributeSupported ( \"nil\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"string\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"boolean\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"number\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"table\" )) Output true true true true false","title":"isTypeAttributeSupported"},{"location":"DeusFramework/Libraries/instanceUtils/#make","text":"Useful for creating lots of instances at once, for only a few instances it is reccomended to use Instance.new() -- Creates a model in workspace named \"Container\" with a 1x1x1 anchored part inside InstanceUtils . make ( { \"Model\" , { Name = \"Container\" }, workspace , { \"Part\" , { Anchored = true , Size = Vector3 . new ( 1 , 1 , 1 ) } } } )","title":"make"},{"location":"DeusFramework/Libraries/mathUtils/","text":"MathUtils","title":"MathUtils"},{"location":"DeusFramework/Libraries/mathUtils/#mathutils","text":"","title":"MathUtils"},{"location":"DeusFramework/Libraries/mouseUtils/","text":"MouseUtils Loading local MouseUtils = Deus : Load ( \"Deus.MouseUtils\" ). new () Methods getTargetAtPosition Returns Instance at screen x and y coordinates or nil if raycast fails. Uses Enum.FilterType and a table for filterDescendantsInstances to control raycast. local target = MouseUtils . getTargetAtPosition ( x , y , filterType , filterDescendantsInstances ) getGuiObjectsAtPositionWithWhitelist Returns GuiObjects in filter if GuiObjects are at screen x and y coordinates. If recursive is enabled will count descendants of filter as part of whitelist. local guiObjects = MouseUtils . getGuiObjectsAtPositionWithWhitelist ( x , y , filter , recursive )","title":"MouseUtils"},{"location":"DeusFramework/Libraries/mouseUtils/#mouseutils","text":"","title":"MouseUtils"},{"location":"DeusFramework/Libraries/mouseUtils/#loading","text":"local MouseUtils = Deus : Load ( \"Deus.MouseUtils\" ). new ()","title":"Loading"},{"location":"DeusFramework/Libraries/mouseUtils/#methods","text":"","title":"Methods"},{"location":"DeusFramework/Libraries/mouseUtils/#gettargetatposition","text":"Returns Instance at screen x and y coordinates or nil if raycast fails. Uses Enum.FilterType and a table for filterDescendantsInstances to control raycast. local target = MouseUtils . getTargetAtPosition ( x , y , filterType , filterDescendantsInstances )","title":"getTargetAtPosition"},{"location":"DeusFramework/Libraries/mouseUtils/#getguiobjectsatpositionwithwhitelist","text":"Returns GuiObjects in filter if GuiObjects are at screen x and y coordinates. If recursive is enabled will count descendants of filter as part of whitelist. local guiObjects = MouseUtils . getGuiObjectsAtPositionWithWhitelist ( x , y , filter , recursive )","title":"getGuiObjectsAtPositionWithWhitelist"},{"location":"DeusFramework/Libraries/raycastUtils/","text":"RaycastUtils Loading local RaycastUtils = Deus : Load ( \"Deus.RaycastUtils\" ) copyRaycastParams Returns a clone of a provided RaycastParam local raycastParam = RaycastUtils . copyRaycastParams ( raycastParams ) cast Performs a raycast, if raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . cast ( origin , direction , raycastParams ) castCollideOnly Repeats a raycast adding instances that have CanCollide off to its IgnoreList until the raycast does not hit an instance or the instance is CanCollide on. If raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . castCollideOnly ( origin , direction , raycastParams )","title":"RaycastUtils"},{"location":"DeusFramework/Libraries/raycastUtils/#raycastutils","text":"","title":"RaycastUtils"},{"location":"DeusFramework/Libraries/raycastUtils/#loading","text":"local RaycastUtils = Deus : Load ( \"Deus.RaycastUtils\" )","title":"Loading"},{"location":"DeusFramework/Libraries/raycastUtils/#copyraycastparams","text":"Returns a clone of a provided RaycastParam local raycastParam = RaycastUtils . copyRaycastParams ( raycastParams )","title":"copyRaycastParams"},{"location":"DeusFramework/Libraries/raycastUtils/#cast","text":"Performs a raycast, if raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . cast ( origin , direction , raycastParams )","title":"cast"},{"location":"DeusFramework/Libraries/raycastUtils/#castcollideonly","text":"Repeats a raycast adding instances that have CanCollide off to its IgnoreList until the raycast does not hit an instance or the instance is CanCollide on. If raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . castCollideOnly ( origin , direction , raycastParams )","title":"castCollideOnly"},{"location":"DeusFramework/Libraries/stringUtils/","text":"StringUtils Loading local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local StringUtils = Deus : Load ( \"Deus.StringUtils\" ) countMatches Returns count of pattern matches. Example Script print ( StringUtils . countMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output 2 getMatches Returns matches in a table with where the match starts and ends. Example Script print ( StringUtils . getMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output { { End = 3, Match = \"the\", Start = 1 }, { End = 34, Match = \"the\", Start = 32 } } replaceAt Splices a new string into an existing string. Example Script print ( StringUtils . replaceAt ( \"the quick brown fox jumps over the lazy dog\" , \"red cat\" , 11 , 19 )) Output the quick red cat jumps over the lazy dog collapseOccurances Replaces sequential pattern occurances with a single occurance. This is useful to remove double spaces in chat messages. Example Script print ( StringUtils . collapseOccurances ( \" i am spamming chat\" , \" \" )) Output There is still a space at the start of the string. i am spamming chat hash Uses the bytes in a string to generate a hash. Example Script print ( StringUtils . hash ( \"the quick brown fox jumps over the lazy dog\" )) Output 67114530 reverseSub Similar to string.sub() but instead starts at the end of a string instead of the front. Example Script print ( StringUtils . reverseSub ( \"the quick brown fox jumps over the lazy dog\" , 1 , 8 )) Output lazy dog","title":"StringUtils"},{"location":"DeusFramework/Libraries/stringUtils/#stringutils","text":"","title":"StringUtils"},{"location":"DeusFramework/Libraries/stringUtils/#loading","text":"local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local StringUtils = Deus : Load ( \"Deus.StringUtils\" )","title":"Loading"},{"location":"DeusFramework/Libraries/stringUtils/#countmatches","text":"Returns count of pattern matches. Example Script print ( StringUtils . countMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output 2","title":"countMatches"},{"location":"DeusFramework/Libraries/stringUtils/#getmatches","text":"Returns matches in a table with where the match starts and ends. Example Script print ( StringUtils . getMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output { { End = 3, Match = \"the\", Start = 1 }, { End = 34, Match = \"the\", Start = 32 } }","title":"getMatches"},{"location":"DeusFramework/Libraries/stringUtils/#replaceat","text":"Splices a new string into an existing string. Example Script print ( StringUtils . replaceAt ( \"the quick brown fox jumps over the lazy dog\" , \"red cat\" , 11 , 19 )) Output the quick red cat jumps over the lazy dog","title":"replaceAt"},{"location":"DeusFramework/Libraries/stringUtils/#collapseoccurances","text":"Replaces sequential pattern occurances with a single occurance. This is useful to remove double spaces in chat messages. Example Script print ( StringUtils . collapseOccurances ( \" i am spamming chat\" , \" \" )) Output There is still a space at the start of the string. i am spamming chat","title":"collapseOccurances"},{"location":"DeusFramework/Libraries/stringUtils/#hash","text":"Uses the bytes in a string to generate a hash. Example Script print ( StringUtils . hash ( \"the quick brown fox jumps over the lazy dog\" )) Output 67114530","title":"hash"},{"location":"DeusFramework/Libraries/stringUtils/#reversesub","text":"Similar to string.sub() but instead starts at the end of a string instead of the front. Example Script print ( StringUtils . reverseSub ( \"the quick brown fox jumps over the lazy dog\" , 1 , 8 )) Output lazy dog","title":"reverseSub"},{"location":"DeusFramework/Libraries/symbol/","text":"Symbol All symbols of the same name return the same userdata. Symbol is most often used to represent nil in tables. Loading local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local Symbol = Deus : Load ( \"Deus.Symbol\" ) new Creates a symbol for a given string or returns the symbol for that string if one already exists. local None = Symbol . new ( \"None\" ) Example Script print ( Symbol . new ( \"None\" ) == Symbol . new ( \"None\" )) print ( Symbol . new ( \"None\" ) == Symbol . new ( \"none\" )) Output true false","title":"Symbol"},{"location":"DeusFramework/Libraries/symbol/#symbol","text":"All symbols of the same name return the same userdata. Symbol is most often used to represent nil in tables.","title":"Symbol"},{"location":"DeusFramework/Libraries/symbol/#loading","text":"local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local Symbol = Deus : Load ( \"Deus.Symbol\" )","title":"Loading"},{"location":"DeusFramework/Libraries/symbol/#new","text":"Creates a symbol for a given string or returns the symbol for that string if one already exists. local None = Symbol . new ( \"None\" ) Example Script print ( Symbol . new ( \"None\" ) == Symbol . new ( \"None\" )) print ( Symbol . new ( \"None\" ) == Symbol . new ( \"none\" )) Output true false","title":"new"},{"location":"DeusFramework/Libraries/vectorUtils/","text":"VectorUtils","title":"VectorUtils"},{"location":"DeusFramework/Libraries/vectorUtils/#vectorutils","text":"","title":"VectorUtils"},{"location":"DeusFramework/Libraries/Debug/output/","text":"Output","title":"Output"},{"location":"DeusFramework/Libraries/Debug/output/#output","text":"","title":"Output"},{"location":"DeusFramework/Libraries/Debug/visualDebug/","text":"VisualDebug","title":"VisualDebug"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#visualdebug","text":"","title":"VisualDebug"},{"location":"DeusFramework/Libraries/Tables/tableProxy/","text":"TableProxy Creates a table that allows key-values to be set as Internal , ExternalReadOnly , ExternalReadAndWrite . This module serves as the basis of BaseObject . Creating a TableProxy local TableProxy = Deus : Load ( \"Deus.TableProxy\" ) local tableProxy = TableProxy . new ( { Internal = { a = \"this value can only be edited internally\" }, ExternalReadOnly = { b = \"this value can be read externally, but only edited internally\" }, ExternalReadAndWrite = { c = \"this value can be edited from externally and internally\" } } ) Returning the external TableProxy return tableProxy . Proxy","title":"TableProxy"},{"location":"DeusFramework/Libraries/Tables/tableProxy/#tableproxy","text":"Creates a table that allows key-values to be set as Internal , ExternalReadOnly , ExternalReadAndWrite . This module serves as the basis of BaseObject .","title":"TableProxy"},{"location":"DeusFramework/Libraries/Tables/tableProxy/#creating-a-tableproxy","text":"local TableProxy = Deus : Load ( \"Deus.TableProxy\" ) local tableProxy = TableProxy . new ( { Internal = { a = \"this value can only be edited internally\" }, ExternalReadOnly = { b = \"this value can be read externally, but only edited internally\" }, ExternalReadAndWrite = { c = \"this value can be edited from externally and internally\" } } )","title":"Creating a TableProxy"},{"location":"DeusFramework/Libraries/Tables/tableProxy/#returning-the-external-tableproxy","text":"return tableProxy . Proxy","title":"Returning the external TableProxy"},{"location":"DeusFramework/Libraries/Tables/tableUtils/","text":"TableUtils Libray to expand Luau's table methods Loading local TableUtils = Deus : Load ( \"Deus.TableUtils\" ). new () Methods Name Arguments Returns shallowCopy table Table Copy of all key-values stored with a numbered key deepCopy table Table Copy of all key-values getKeys table Table Array of keys getValues table Table Array of values merge tuple Tables Combines all tables into a new table unpack tuple Tables Unpacks multiple tables in order remove variant Value Removes the given value in a table sub table Table, number IndexStart, number IndexEnd Returns key-values stored with a numbered key between IndexStart and IndexEnd sum table Table Returns the sum of an array of number , Vector2 , or Vector3 values average table Table Returns the average of an array of number , Vector2 , or Vector3 values instanceAsIndex Instance Instance Allows an instance to behave like the __index of a table instanceAsNewIndex Instance Instance Allows an instance to behave like the __newindex ofa table","title":"TableUtils"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#tableutils","text":"Libray to expand Luau's table methods","title":"TableUtils"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#loading","text":"local TableUtils = Deus : Load ( \"Deus.TableUtils\" ). new ()","title":"Loading"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#methods","text":"Name Arguments Returns shallowCopy table Table Copy of all key-values stored with a numbered key deepCopy table Table Copy of all key-values getKeys table Table Array of keys getValues table Table Array of values merge tuple Tables Combines all tables into a new table unpack tuple Tables Unpacks multiple tables in order remove variant Value Removes the given value in a table sub table Table, number IndexStart, number IndexEnd Returns key-values stored with a numbered key between IndexStart and IndexEnd sum table Table Returns the sum of an array of number , Vector2 , or Vector3 values average table Table Returns the average of an array of number , Vector2 , or Vector3 values instanceAsIndex Instance Instance Allows an instance to behave like the __index of a table instanceAsNewIndex Instance Instance Allows an instance to behave like the __newindex ofa table","title":"Methods"},{"location":"DeusFramework/Services/networkService/","text":"NetworkService","title":"NetworkService"},{"location":"DeusFramework/Services/networkService/#networkservice","text":"","title":"NetworkService"},{"location":"DeusFramework/Services/objectService/","text":"ObjectService","title":"ObjectService"},{"location":"DeusFramework/Services/objectService/#objectservice","text":"","title":"ObjectService"},{"location":"DeusFramework/Services/serverTimeSyncService/","text":"ServerTimeSyncService","title":"ServerTimeSyncService"},{"location":"DeusFramework/Services/serverTimeSyncService/#servertimesyncservice","text":"","title":"ServerTimeSyncService"}]}