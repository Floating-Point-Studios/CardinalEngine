{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About DeusFramework serves primarily as a bare bones module loader with few bloat modules and a result has no services of its own. CardinalEngine is a higher-level module loader built on DeusFramework and provides basic services for managing DeusFramework modules. DeusFramework is able to be used independently from CardinalEngine Setup Roblox Studio Download the rbxm from CardinalEngine or DeusFramework Insert the file into ServerScriptService Visual Studio and Rojo Download the source code from the links above or clone the repository through GitBash Unzip the file and place it anywhere in your project directory In the CardinalEngine directory run git submodule update --init --recursive","title":"About"},{"location":"#about","text":"DeusFramework serves primarily as a bare bones module loader with few bloat modules and a result has no services of its own. CardinalEngine is a higher-level module loader built on DeusFramework and provides basic services for managing DeusFramework modules. DeusFramework is able to be used independently from CardinalEngine","title":"About"},{"location":"#setup","text":"","title":"Setup"},{"location":"#roblox-studio","text":"Download the rbxm from CardinalEngine or DeusFramework Insert the file into ServerScriptService","title":"Roblox Studio"},{"location":"#visual-studio-and-rojo","text":"Download the source code from the links above or clone the repository through GitBash Unzip the file and place it anywhere in your project directory In the CardinalEngine directory run git submodule update --init --recursive","title":"Visual Studio and Rojo"},{"location":"snippets/","text":"Snippets VSCode snippets for quickly setting up formatted modules Prefix Description @class Formats a class module @classSimple Formats a class module that has no events, less configuration, and all properties are read & write @service Formats a service module @module Formats a module @enum Formats a enum @datatype Formats a custom type module assert Runs Output.assert() error Runs Output.error() warn Runs Output.warn()","title":"Snippets"},{"location":"snippets/#snippets","text":"VSCode snippets for quickly setting up formatted modules Prefix Description @class Formats a class module @classSimple Formats a class module that has no events, less configuration, and all properties are read & write @service Formats a service module @module Formats a module @enum Formats a enum @datatype Formats a custom type module assert Runs Output.assert() error Runs Output.error() warn Runs Output.warn()","title":"Snippets"},{"location":"CardinalEngine/usage/","text":"Usage Getting Loader Cardinal by default provides only one way of getting the module loader when not loading from Cardinal's designated folder for modules Loading from Shared This method works when it is known that Cardinal is done loading and the script does not need to yield. local Cardinal = shared . Cardinal Getting & Registering Packages Info Refer to DeusFramework Usage for details on how to register packages on your own or to write your own loader Packages are Scripts, LocalScripts, ModuleScripts, or folders that are registered by Cardinal. Cardinal will load packages in a folder parented to ServerStorage named CardinalPackages . File Extensions ModuleScripts and folders can have file extensions. If no extension is found the package will be distrubted to the Server and Client. The extension .shared will be loaded by both the Client and Server. The extension .client will be loaded by only the Client The extension .server will be loaded by only the Server LocalScripts LocalScripts directly parented to CardinalPackages will be loaded in ReplicatedFirst Scripts Scripts directly parented to CardinalPackages will be loaded in ServerScriptService","title":"Usage"},{"location":"CardinalEngine/usage/#usage","text":"","title":"Usage"},{"location":"CardinalEngine/usage/#getting-loader","text":"Cardinal by default provides only one way of getting the module loader when not loading from Cardinal's designated folder for modules Loading from Shared This method works when it is known that Cardinal is done loading and the script does not need to yield. local Cardinal = shared . Cardinal","title":"Getting Loader"},{"location":"CardinalEngine/usage/#getting-registering-packages","text":"Info Refer to DeusFramework Usage for details on how to register packages on your own or to write your own loader Packages are Scripts, LocalScripts, ModuleScripts, or folders that are registered by Cardinal. Cardinal will load packages in a folder parented to ServerStorage named CardinalPackages .","title":"Getting &amp; Registering Packages"},{"location":"CardinalEngine/usage/#file-extensions","text":"ModuleScripts and folders can have file extensions. If no extension is found the package will be distrubted to the Server and Client. The extension .shared will be loaded by both the Client and Server. The extension .client will be loaded by only the Client The extension .server will be loaded by only the Server","title":"File Extensions"},{"location":"CardinalEngine/usage/#localscripts","text":"LocalScripts directly parented to CardinalPackages will be loaded in ReplicatedFirst","title":"LocalScripts"},{"location":"CardinalEngine/usage/#scripts","text":"Scripts directly parented to CardinalPackages will be loaded in ServerScriptService","title":"Scripts"},{"location":"CardinalEngine/Libraries/cardinoid/","text":"Cardinoid Inherited from BaseObject Warning At this time the Swimming and Climbing state of Cardinoid are not yet implemented Modern implementation of Luanoid in the CardinalEngine. Throughout this documentation Agent refers to the Cardinoid object while Character refers to Agent.Character . Many situations may require a custom StateController to write one it is recommended to view the default StateController . Constructing Cardinoid's constructor expects either a dictionary or Character created by Cardinoid. Example Server This script creates a Cardinoid for when a Player first joins local Cardinoid = Cardinal : Load ( \"Cardinal.Cardinoid\" ) game : GetService ( \"Players\" ). PlayerAdded : Connect ( function ( player ) local agent = Cardinoid . new ( { -- Most these settings are optional and will default to these values if not set Name = player . Name , -- Defaults to a randomly generated string Health = 100 , MaxHealth = 100 , WalkSpeed = 16 , JumpPower = 50 , HipHeight = 2 , LookInMoveDir = true , CanJump = true , CanClimb = true } ) -- SetNetworkOwner() can be called on Cardinoids without being a descendant of Workspace due to it actually not setting the NetworkOwner until it is a descendant of Workspace agent . Character : SetNetworkOwner ( player ) agent . Parent = workspace player . Character = agent . Character end ) Client This script creates the Cardinoid Object not the character for the player local Cardinoid = Cardinal : Load ( \"Cardinal.Cardinoid\" ) local LocalPlayer = game : GetService ( \"Players\" ). LocalPlayer local Agent LocalPlayer . CharacterAdded : Connect ( function ( character ) if Agent then Agent : Destroy () end Agent = Cardinoid . new ( character ) end ) if LocalPlayer . Character then Agent = Cardinoid . new ( LocalPlayer . Character ) end MountRig Tip This method should only be used on the Client to avoid the Server streaming the rig to the Clients Accepts any rigged character including those made by \"Rig Builder\" in the plugins tab of Roblox Studio. The only requirement is for the rig to have a HumanoidRootPart. agent : MountRig ( rig ) UnmountRig Destroys the agent's current rig. agent : UnmountRig () LoadAnimation Expects an Animation as the first argument, the second argument is a optional string which will default to the name of the Animation if not provided. Multiple animations can be loaded under the same name. When PlayAnimation() is called one Animation will be selected at random. agent : LoadAnimation ( animation , name ? ) PlayAnimation Randomly selects an Animation loaded under name. agent : PlayAnimation ( name ) StopAnimation Stops all animations loaded under name. agent : StopAnimation ( name ) StopAllAnimations Stops all animations. agent : StopAllAnimations () Jump Queues the StateController to jump. agent : Jump () Sit Warning This method has not been implemented yet and only exists in name Queues the StateController to sit. agent : Sit ( seat ? , offset ? ) MoveTo Tip Setting the target to a moving BasePart with an infinite timeout will have the agent follow the BasePart Has the StateController move to the requested Vector3 or Instance agent : MoveTo ( vector3 ) agent : MoveTo ( basePart ) CancelMoveTo Cancels the current MoveTo agent : CancelMoveTo () SetNetworkOwner Sets who the character's NetworkOwner should be as a result this method can be used even when the character is not a descendant of Workspace . If the character becomes a descendant of Workspace Cardinoid will immediately run SetNetworkOwner() on the HumanoidRootPart. Example Setting NetworkOwner to server agent : SetNetworkOwner () Setting NetworkOwner to player local players = game : GetService ( \"Players\" ) agent : SetNetworkOwner ( players : FindFirstChildWhichIsA ( \"Player\" )) PauseSimulation Pauses updates from the StateController agent : PauseSimulation () ResumeSimulation Resumes updates from the StateController agent : ResumeSimulation () Events StateChanged agent . StateChanged : Connect ( function ( newState , lastState ) print ( newState , lastState ) end ) MoveToFinished agent . StateChanged : Connect ( function ( success ) if success then print ( \"MoveTo succeeded!\" ) else print ( \"MoveTo failed!\" ) end end ) Read-only Properties Name Description Character Model that contains HumanoidRootPart and the Rig if set LastState Previous state of the agent State Current state of the agent PlayingAnimations Currently playing AnimationTracks AnimationTracks Dictionary of AnimationTracks RigParts List of parts that make up the Rig if set Read-write Properties Name Description Health Current health MaxHealth Maximum health WalkSpeed Walking speed JumpPower Applied as an impulse to the HumanoidRootPart multiplied by the AssemblyMass HipHeight Height the middle of the HumanoidRootPart will levitate at off the ground LookInMoveDir Boolean if the character should be facing the same direction it is walking CanJump If agent:Jump() does anything CanClimb If the agent is able to enter the Climb state MoveDir Direction of movement expressed as a Vector3 unit LookDir Direction to look expressed as a Vector3 unit, disabled if LookInMoveDir is true StateController Anything with an Update() method","title":"Cardinoid"},{"location":"CardinalEngine/Libraries/cardinoid/#cardinoid","text":"Inherited from BaseObject Warning At this time the Swimming and Climbing state of Cardinoid are not yet implemented Modern implementation of Luanoid in the CardinalEngine. Throughout this documentation Agent refers to the Cardinoid object while Character refers to Agent.Character . Many situations may require a custom StateController to write one it is recommended to view the default StateController .","title":"Cardinoid"},{"location":"CardinalEngine/Libraries/cardinoid/#constructing","text":"Cardinoid's constructor expects either a dictionary or Character created by Cardinoid. Example Server This script creates a Cardinoid for when a Player first joins local Cardinoid = Cardinal : Load ( \"Cardinal.Cardinoid\" ) game : GetService ( \"Players\" ). PlayerAdded : Connect ( function ( player ) local agent = Cardinoid . new ( { -- Most these settings are optional and will default to these values if not set Name = player . Name , -- Defaults to a randomly generated string Health = 100 , MaxHealth = 100 , WalkSpeed = 16 , JumpPower = 50 , HipHeight = 2 , LookInMoveDir = true , CanJump = true , CanClimb = true } ) -- SetNetworkOwner() can be called on Cardinoids without being a descendant of Workspace due to it actually not setting the NetworkOwner until it is a descendant of Workspace agent . Character : SetNetworkOwner ( player ) agent . Parent = workspace player . Character = agent . Character end ) Client This script creates the Cardinoid Object not the character for the player local Cardinoid = Cardinal : Load ( \"Cardinal.Cardinoid\" ) local LocalPlayer = game : GetService ( \"Players\" ). LocalPlayer local Agent LocalPlayer . CharacterAdded : Connect ( function ( character ) if Agent then Agent : Destroy () end Agent = Cardinoid . new ( character ) end ) if LocalPlayer . Character then Agent = Cardinoid . new ( LocalPlayer . Character ) end","title":"Constructing"},{"location":"CardinalEngine/Libraries/cardinoid/#mountrig","text":"Tip This method should only be used on the Client to avoid the Server streaming the rig to the Clients Accepts any rigged character including those made by \"Rig Builder\" in the plugins tab of Roblox Studio. The only requirement is for the rig to have a HumanoidRootPart. agent : MountRig ( rig )","title":"MountRig"},{"location":"CardinalEngine/Libraries/cardinoid/#unmountrig","text":"Destroys the agent's current rig. agent : UnmountRig ()","title":"UnmountRig"},{"location":"CardinalEngine/Libraries/cardinoid/#loadanimation","text":"Expects an Animation as the first argument, the second argument is a optional string which will default to the name of the Animation if not provided. Multiple animations can be loaded under the same name. When PlayAnimation() is called one Animation will be selected at random. agent : LoadAnimation ( animation , name ? )","title":"LoadAnimation"},{"location":"CardinalEngine/Libraries/cardinoid/#playanimation","text":"Randomly selects an Animation loaded under name. agent : PlayAnimation ( name )","title":"PlayAnimation"},{"location":"CardinalEngine/Libraries/cardinoid/#stopanimation","text":"Stops all animations loaded under name. agent : StopAnimation ( name )","title":"StopAnimation"},{"location":"CardinalEngine/Libraries/cardinoid/#stopallanimations","text":"Stops all animations. agent : StopAllAnimations ()","title":"StopAllAnimations"},{"location":"CardinalEngine/Libraries/cardinoid/#jump","text":"Queues the StateController to jump. agent : Jump ()","title":"Jump"},{"location":"CardinalEngine/Libraries/cardinoid/#sit","text":"Warning This method has not been implemented yet and only exists in name Queues the StateController to sit. agent : Sit ( seat ? , offset ? )","title":"Sit"},{"location":"CardinalEngine/Libraries/cardinoid/#moveto","text":"Tip Setting the target to a moving BasePart with an infinite timeout will have the agent follow the BasePart Has the StateController move to the requested Vector3 or Instance agent : MoveTo ( vector3 ) agent : MoveTo ( basePart )","title":"MoveTo"},{"location":"CardinalEngine/Libraries/cardinoid/#cancelmoveto","text":"Cancels the current MoveTo agent : CancelMoveTo ()","title":"CancelMoveTo"},{"location":"CardinalEngine/Libraries/cardinoid/#setnetworkowner","text":"Sets who the character's NetworkOwner should be as a result this method can be used even when the character is not a descendant of Workspace . If the character becomes a descendant of Workspace Cardinoid will immediately run SetNetworkOwner() on the HumanoidRootPart. Example Setting NetworkOwner to server agent : SetNetworkOwner () Setting NetworkOwner to player local players = game : GetService ( \"Players\" ) agent : SetNetworkOwner ( players : FindFirstChildWhichIsA ( \"Player\" ))","title":"SetNetworkOwner"},{"location":"CardinalEngine/Libraries/cardinoid/#pausesimulation","text":"Pauses updates from the StateController agent : PauseSimulation ()","title":"PauseSimulation"},{"location":"CardinalEngine/Libraries/cardinoid/#resumesimulation","text":"Resumes updates from the StateController agent : ResumeSimulation ()","title":"ResumeSimulation"},{"location":"CardinalEngine/Libraries/cardinoid/#events","text":"","title":"Events"},{"location":"CardinalEngine/Libraries/cardinoid/#statechanged","text":"agent . StateChanged : Connect ( function ( newState , lastState ) print ( newState , lastState ) end )","title":"StateChanged"},{"location":"CardinalEngine/Libraries/cardinoid/#movetofinished","text":"agent . StateChanged : Connect ( function ( success ) if success then print ( \"MoveTo succeeded!\" ) else print ( \"MoveTo failed!\" ) end end )","title":"MoveToFinished"},{"location":"CardinalEngine/Libraries/cardinoid/#read-only-properties","text":"Name Description Character Model that contains HumanoidRootPart and the Rig if set LastState Previous state of the agent State Current state of the agent PlayingAnimations Currently playing AnimationTracks AnimationTracks Dictionary of AnimationTracks RigParts List of parts that make up the Rig if set","title":"Read-only Properties"},{"location":"CardinalEngine/Libraries/cardinoid/#read-write-properties","text":"Name Description Health Current health MaxHealth Maximum health WalkSpeed Walking speed JumpPower Applied as an impulse to the HumanoidRootPart multiplied by the AssemblyMass HipHeight Height the middle of the HumanoidRootPart will levitate at off the ground LookInMoveDir Boolean if the character should be facing the same direction it is walking CanJump If agent:Jump() does anything CanClimb If the agent is able to enter the Climb state MoveDir Direction of movement expressed as a Vector3 unit LookDir Direction to look expressed as a Vector3 unit, disabled if LookInMoveDir is true StateController Anything with an Update() method","title":"Read-write Properties"},{"location":"CardinalEngine/Libraries/httpUtils/","text":"HttpUtils Info Documentation for this page is a work in progress. HTTP Method Request has body Response has body Safe Idempotent Cacheable GET HEAD POST PUT DELETE TRACE OPTIONS CONNECT PATCH get HttpUtils . get ( url , headers ? ) head HttpUtils . head ( url , headers ? , body ? ) post HttpUtils . post ( url , headers ? , body ? ) put HttpUtils . put ( url , headers ? , body ? ) delete HttpUtils . delete ( url , headers ? , body ? ) connect HttpUtils . connect ( url , headers ? ) options HttpUtils . options ( url , headers ? ) trace HttpUtils . trace ( url , headers ? ) patch HttpUtils . patch ( url , headers ? , body ? ) formatQueryStrings","title":"HttpUtils"},{"location":"CardinalEngine/Libraries/httpUtils/#httputils","text":"Info Documentation for this page is a work in progress. HTTP Method Request has body Response has body Safe Idempotent Cacheable GET HEAD POST PUT DELETE TRACE OPTIONS CONNECT PATCH","title":"HttpUtils"},{"location":"CardinalEngine/Libraries/httpUtils/#get","text":"HttpUtils . get ( url , headers ? )","title":"get"},{"location":"CardinalEngine/Libraries/httpUtils/#head","text":"HttpUtils . head ( url , headers ? , body ? )","title":"head"},{"location":"CardinalEngine/Libraries/httpUtils/#post","text":"HttpUtils . post ( url , headers ? , body ? )","title":"post"},{"location":"CardinalEngine/Libraries/httpUtils/#put","text":"HttpUtils . put ( url , headers ? , body ? )","title":"put"},{"location":"CardinalEngine/Libraries/httpUtils/#delete","text":"HttpUtils . delete ( url , headers ? , body ? )","title":"delete"},{"location":"CardinalEngine/Libraries/httpUtils/#connect","text":"HttpUtils . connect ( url , headers ? )","title":"connect"},{"location":"CardinalEngine/Libraries/httpUtils/#options","text":"HttpUtils . options ( url , headers ? )","title":"options"},{"location":"CardinalEngine/Libraries/httpUtils/#trace","text":"HttpUtils . trace ( url , headers ? )","title":"trace"},{"location":"CardinalEngine/Libraries/httpUtils/#patch","text":"HttpUtils . patch ( url , headers ? , body ? )","title":"patch"},{"location":"CardinalEngine/Libraries/httpUtils/#formatquerystrings","text":"","title":"formatQueryStrings"},{"location":"CardinalEngine/Libraries/promise/","text":"Promise Info This library is included by default due to its usage in HttpUtils Promise library developed by evaera, see the official documentation .","title":"Promise"},{"location":"CardinalEngine/Libraries/promise/#promise","text":"Info This library is included by default due to its usage in HttpUtils Promise library developed by evaera, see the official documentation .","title":"Promise"},{"location":"CardinalEngine/Libraries/roact/","text":"Roact Info This library is included by default due to its usage in ALICE UI library developed by Roblox, see the official documentation .","title":"Roact"},{"location":"CardinalEngine/Libraries/roact/#roact","text":"Info This library is included by default due to its usage in ALICE UI library developed by Roblox, see the official documentation .","title":"Roact"},{"location":"CardinalEngine/Libraries/testez/","text":"TestEZ Info This library is included by default for debugging of Cardinal and Deus Automated testing library developed by Roblox, see the official documentation .","title":"TestEZ"},{"location":"CardinalEngine/Libraries/testez/#testez","text":"Info This library is included by default for debugging of Cardinal and Deus Automated testing library developed by Roblox, see the official documentation .","title":"TestEZ"},{"location":"CardinalEngine/Services/agentService/","text":"AgentService Service for spawning agents through Cardinoid and moving them to targets from PathfindingService . Spawn Wrapper for Cardinoid.new() with a few additional dictionary keys. Example Creating a new agent AgentService : Spawn ( { -- New settings Rig = RIG , Parent = workspace , NetworkOwner = PLAYER , -- Original settings Name = \"\" , Health = 100 , MaxHealth = 100 , WalkSpeed = 16 , JumpPower = 50 , HipHeight = 2 , LookInMoveDir = true , CanJump = true , CanClimb = true } ) Creating an agent from a character AgentService : Spawn ( character ) MoveTo Similar to agent:MoveTo() except uses PathfindingService and automatically takes into account of the character's radius, height, and ability to jump. Excepts the first argument to be an agent, and the second argument to either be a Vector3 or Instance . Yields and returns a boolean for if the agent successfully or failed in reaching the target. AgentService : MoveTo ( agent , target )","title":"AgentService"},{"location":"CardinalEngine/Services/agentService/#agentservice","text":"Service for spawning agents through Cardinoid and moving them to targets from PathfindingService .","title":"AgentService"},{"location":"CardinalEngine/Services/agentService/#spawn","text":"Wrapper for Cardinoid.new() with a few additional dictionary keys. Example Creating a new agent AgentService : Spawn ( { -- New settings Rig = RIG , Parent = workspace , NetworkOwner = PLAYER , -- Original settings Name = \"\" , Health = 100 , MaxHealth = 100 , WalkSpeed = 16 , JumpPower = 50 , HipHeight = 2 , LookInMoveDir = true , CanJump = true , CanClimb = true } ) Creating an agent from a character AgentService : Spawn ( character )","title":"Spawn"},{"location":"CardinalEngine/Services/agentService/#moveto","text":"Similar to agent:MoveTo() except uses PathfindingService and automatically takes into account of the character's radius, height, and ability to jump. Excepts the first argument to be an agent, and the second argument to either be a Vector3 or Instance . Yields and returns a boolean for if the agent successfully or failed in reaching the target. AgentService : MoveTo ( agent , target )","title":"MoveTo"},{"location":"CardinalEngine/Services/networkService/","text":"NetworkService Easy management of RemoteEvents and RemoteFunctions between the server and client. Connect Info When Connect is used on the Server the first argument will always be the player. NetworkService : Connect ( \"RemoteEventName\" , function (...) end ) Fire NetworkService : Fire ( \"RemoteEventName\" , ...) OnInvoke Info When OnInvoke is used on the Server the first argument will always be the player. NetworkService : OnInvoke ( \"RemoteFunctionName\" , function (...) return ... end Invoke NetworkService : Invoke ( \"RemoteFunctionName\" , ...)","title":"NetworkService"},{"location":"CardinalEngine/Services/networkService/#networkservice","text":"Easy management of RemoteEvents and RemoteFunctions between the server and client.","title":"NetworkService"},{"location":"CardinalEngine/Services/networkService/#connect","text":"Info When Connect is used on the Server the first argument will always be the player. NetworkService : Connect ( \"RemoteEventName\" , function (...) end )","title":"Connect"},{"location":"CardinalEngine/Services/networkService/#fire","text":"NetworkService : Fire ( \"RemoteEventName\" , ...)","title":"Fire"},{"location":"CardinalEngine/Services/networkService/#oninvoke","text":"Info When OnInvoke is used on the Server the first argument will always be the player. NetworkService : OnInvoke ( \"RemoteFunctionName\" , function (...) return ... end","title":"OnInvoke"},{"location":"CardinalEngine/Services/networkService/#invoke","text":"NetworkService : Invoke ( \"RemoteFunctionName\" , ...)","title":"Invoke"},{"location":"CardinalEngine/Services/objectService/","text":"ObjectService Tracks all live objects created through BaseObject GetObject Returns an object based on its ObjectId local obj = ObjectService : GetObject ( \"objectId\" )","title":"ObjectService"},{"location":"CardinalEngine/Services/objectService/#objectservice","text":"Tracks all live objects created through BaseObject","title":"ObjectService"},{"location":"CardinalEngine/Services/objectService/#getobject","text":"Returns an object based on its ObjectId local obj = ObjectService : GetObject ( \"objectId\" )","title":"GetObject"},{"location":"CardinalEngine/Services/parallelService/","text":"ParallelService Manages Actors in a pool Run Runs a function in a given module in a separate thread, returns the results when complete. This example runs the function print in ModuleScript with the arguments foo and bar local results = { ParallelService : Run ( script . ModuleScript , \"print\" , \"foo\" , \"bar\" )}","title":"ParallelService"},{"location":"CardinalEngine/Services/parallelService/#parallelservice","text":"Manages Actors in a pool","title":"ParallelService"},{"location":"CardinalEngine/Services/parallelService/#run","text":"Runs a function in a given module in a separate thread, returns the results when complete. This example runs the function print in ModuleScript with the arguments foo and bar local results = { ParallelService : Run ( script . ModuleScript , \"print\" , \"foo\" , \"bar\" )}","title":"Run"},{"location":"DeusFramework/usage/","text":"Usage Getting Loader Deus by default provides 2 ways of getting the module loader. Loading from Shared This method works when it is known that Deus is done loading and the script does not need to yield. local Deus = shared . Deus Loading from ReplicatedStorage This method is reccomended when a script needs to access Deus at the start of the game. local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) Getting modules Deus provides 2 ways of getting modules. The first is to use the loader obtained from the steps above, the second is accessible only from a ModuleScript loaded by Deus. Both use the Load() method. Loading modules from Shared or ReplicatedStorage This should only be used in Scripts or LocalScripts local BaseObject = Deus : Load ( \"Deus.BaseObject\" ) Loading modules from ModuleScript This should be the primary method in loading modules local BaseObject local Output local StringUtils local Module = {} function Module . start () BaseObject = Module : Load ( \"Deus.BaseObject\" ) Output = Module : Load ( \"Deus.Output\" ) StringUtils = Module : Load ( \"Deus.StringUtils\" ) end return Module Registering modules To register or add your own modules to Deus that can be loaded globally later use the Register() method. Here's an example of a module tree. script - module1 - submodule1 - module2 - module3 Deus : Register ( script , \"myModuleName\" ) To load your modules you would use the path with the module name specified earlier. Info By default Deus will not be able to load submodule1 in the tree as it will ignore submodules. local module1 = Deus : Load ( \"myModuleName.module1\" ) local module2 = Deus : Load ( \"myModuleName.module2\" ) local module3 = Deus : Load ( \"myModuleName.module3\" ) -- These will not work! local submodule1 = Deus : Load ( \"myModuleName.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1\" ). submodule1","title":"Usage"},{"location":"DeusFramework/usage/#usage","text":"","title":"Usage"},{"location":"DeusFramework/usage/#getting-loader","text":"Deus by default provides 2 ways of getting the module loader. Loading from Shared This method works when it is known that Deus is done loading and the script does not need to yield. local Deus = shared . Deus Loading from ReplicatedStorage This method is reccomended when a script needs to access Deus at the start of the game. local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" ))","title":"Getting Loader"},{"location":"DeusFramework/usage/#getting-modules","text":"Deus provides 2 ways of getting modules. The first is to use the loader obtained from the steps above, the second is accessible only from a ModuleScript loaded by Deus. Both use the Load() method. Loading modules from Shared or ReplicatedStorage This should only be used in Scripts or LocalScripts local BaseObject = Deus : Load ( \"Deus.BaseObject\" ) Loading modules from ModuleScript This should be the primary method in loading modules local BaseObject local Output local StringUtils local Module = {} function Module . start () BaseObject = Module : Load ( \"Deus.BaseObject\" ) Output = Module : Load ( \"Deus.Output\" ) StringUtils = Module : Load ( \"Deus.StringUtils\" ) end return Module","title":"Getting modules"},{"location":"DeusFramework/usage/#registering-modules","text":"To register or add your own modules to Deus that can be loaded globally later use the Register() method. Here's an example of a module tree. script - module1 - submodule1 - module2 - module3 Deus : Register ( script , \"myModuleName\" ) To load your modules you would use the path with the module name specified earlier. Info By default Deus will not be able to load submodule1 in the tree as it will ignore submodules. local module1 = Deus : Load ( \"myModuleName.module1\" ) local module2 = Deus : Load ( \"myModuleName.module2\" ) local module3 = Deus : Load ( \"myModuleName.module3\" ) -- These will not work! local submodule1 = Deus : Load ( \"myModuleName.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1.submodule1\" ) local submodule1 = Deus : Load ( \"myModuleName.module1\" ). submodule1","title":"Registering modules"},{"location":"DeusFramework/Classes/PID/","text":"PID Instructions to tune can be found here . Creating local PID = Deus : Load ( \"Deus.PID\" ) local pid = PID . new ( kP , kI , kD , desiredValue , bias ) Usage local error = pid : Update ( actualValue ) Properties Type Name number KP number KI number KD number DesiredValue number Bias number _lastUpdate number _errorPrior number _integralPrior","title":"PID"},{"location":"DeusFramework/Classes/PID/#pid","text":"Instructions to tune can be found here .","title":"PID"},{"location":"DeusFramework/Classes/PID/#creating","text":"local PID = Deus : Load ( \"Deus.PID\" ) local pid = PID . new ( kP , kI , kD , desiredValue , bias )","title":"Creating"},{"location":"DeusFramework/Classes/PID/#usage","text":"local error = pid : Update ( actualValue )","title":"Usage"},{"location":"DeusFramework/Classes/PID/#properties","text":"Type Name number KP number KI number KD number DesiredValue number Bias number _lastUpdate number _errorPrior number _integralPrior","title":"Properties"},{"location":"DeusFramework/Classes/baseObject/","text":"BaseObject Objects that require permissions, replication across client-server boundary, change detection, or inheritance are inherited from the BaseObject. If an object does not require these it is reccomended to use a simple metatable as a object. Permissions Internal Access Internal access refers to direct access to the object's metatable which provides the ability to read and write to all properties. External Access External access refers to access only to the object's proxy which provides limited access. Usage Creating a new class All arguments are optional If a ClassName is not provided a randomly generated ClassName will be assigned Certain method and event names are reserved and will be overwritten if used If \"Changed\" is included in the Events table then the BaseObject will fire the event when a property change is detected Type Property Description string ClassName Name of class boolean Extendable If object can be inherited from function Constructor Function ran after object is made and before object is returned function Deconstructor Function ran after before object is destroyed table Events List of class events table PrivateProperties List of properties only accessible with internal access table PublicReadOnlyProperties List of properties only readable with external access table PublicReadAndWriteProperties List of properties read and writable with external access Snippets Regular local myClass = { ClassName = \"myClass\" , Events = {} } function myClass : Constructor ( part ) self . foo = part end function myClass : Deconstructor () self . foo : Destroy () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end return myClass Simple local myClass = { ClassName = \"myClass\" } function myClass : Constructor () end function myClass : Deconstructor () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) -- Property assignment should occur here myClass . foo = None return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass Creating a new object local myObject = myClass . new ( Instance . new ( \"Part\" )) Representing nil To represet nil in object properties use the Symbol None function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end Using superclasses Objects with a superclass inherit the methods of its superclass. Be sure to have all the properties the inherited functions need to run as properties are not automatically inherited. local myClass = {} myClass . ClassName = \"myClass\" function myClass . start () -- New class inherited from Deus.RemoteEvent myClass . Superclass = myClass : Load ( \"Deus.RemoteEvent\" ) return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass Inherited methods FireEvent Internal Access Required myObject : FireEvent ( \"myEvent\" , ...) GetPropertyChangedSignal Info Cannot hook to properties of PrivateProperties myObject : GetPropertyChangedSignal ( \"foo\" ): Connect ( function ( newProperty , oldProperty ) end ) GetMethods myObject : GetMethods () GetEvents myObject : Events () GetReadableProperties Returns PublicReadOnlyProperties and PublicReadAndWriteProperties myObject : GetReadableProperties () GetWritableProperties Returns PublicReadAndWriteProperties myObject : GetWritableProperties () Serialize myObject : Serialize () Hash myObject : Hash () Properties Permission Type Name Description ReadOnly String ClassName Name of class ReadOnly String Superclass Class object is extended from ReadOnly Boolean Extendable If object can be inherited from ReadOnly String ObjectId UUID of object ReadOnly Number TickCreated Time object was created (On objects replicated across server/client boundary the time will be in server time) ReadOnly userdata Proxy Object's proxy limited to external access (Inherited from TableProxy )","title":"BaseObject"},{"location":"DeusFramework/Classes/baseObject/#baseobject","text":"Objects that require permissions, replication across client-server boundary, change detection, or inheritance are inherited from the BaseObject. If an object does not require these it is reccomended to use a simple metatable as a object. Permissions Internal Access Internal access refers to direct access to the object's metatable which provides the ability to read and write to all properties. External Access External access refers to access only to the object's proxy which provides limited access.","title":"BaseObject"},{"location":"DeusFramework/Classes/baseObject/#usage","text":"Creating a new class All arguments are optional If a ClassName is not provided a randomly generated ClassName will be assigned Certain method and event names are reserved and will be overwritten if used If \"Changed\" is included in the Events table then the BaseObject will fire the event when a property change is detected Type Property Description string ClassName Name of class boolean Extendable If object can be inherited from function Constructor Function ran after object is made and before object is returned function Deconstructor Function ran after before object is destroyed table Events List of class events table PrivateProperties List of properties only accessible with internal access table PublicReadOnlyProperties List of properties only readable with external access table PublicReadAndWriteProperties List of properties read and writable with external access Snippets Regular local myClass = { ClassName = \"myClass\" , Events = {} } function myClass : Constructor ( part ) self . foo = part end function myClass : Deconstructor () self . foo : Destroy () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end return myClass Simple local myClass = { ClassName = \"myClass\" } function myClass : Constructor () end function myClass : Deconstructor () end function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) -- Property assignment should occur here myClass . foo = None return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass","title":"Usage"},{"location":"DeusFramework/Classes/baseObject/#creating-a-new-object","text":"local myObject = myClass . new ( Instance . new ( \"Part\" ))","title":"Creating a new object"},{"location":"DeusFramework/Classes/baseObject/#representing-nil","text":"To represet nil in object properties use the Symbol None function myClass . start () local None = myClass : Load ( \"Deus.Symbol\" ). get ( \"None\" ) myClass . PrivateProperties = { foo = None } myClass . PublicReadOnlyProperties = {} myClass . PublicReadAndWriteProperties = {} return myClass : Load ( \"Deus.BaseObject\" ). new ( myClass ) end","title":"Representing nil"},{"location":"DeusFramework/Classes/baseObject/#using-superclasses","text":"Objects with a superclass inherit the methods of its superclass. Be sure to have all the properties the inherited functions need to run as properties are not automatically inherited. local myClass = {} myClass . ClassName = \"myClass\" function myClass . start () -- New class inherited from Deus.RemoteEvent myClass . Superclass = myClass : Load ( \"Deus.RemoteEvent\" ) return myClass : Load ( \"Deus.BaseObject\" ). newSimple ( myClass ) end return myClass","title":"Using superclasses"},{"location":"DeusFramework/Classes/baseObject/#inherited-methods","text":"","title":"Inherited methods"},{"location":"DeusFramework/Classes/baseObject/#fireevent","text":"Internal Access Required myObject : FireEvent ( \"myEvent\" , ...)","title":"FireEvent"},{"location":"DeusFramework/Classes/baseObject/#getpropertychangedsignal","text":"Info Cannot hook to properties of PrivateProperties myObject : GetPropertyChangedSignal ( \"foo\" ): Connect ( function ( newProperty , oldProperty ) end )","title":"GetPropertyChangedSignal"},{"location":"DeusFramework/Classes/baseObject/#getmethods","text":"myObject : GetMethods ()","title":"GetMethods"},{"location":"DeusFramework/Classes/baseObject/#getevents","text":"myObject : Events ()","title":"GetEvents"},{"location":"DeusFramework/Classes/baseObject/#getreadableproperties","text":"Returns PublicReadOnlyProperties and PublicReadAndWriteProperties myObject : GetReadableProperties ()","title":"GetReadableProperties"},{"location":"DeusFramework/Classes/baseObject/#getwritableproperties","text":"Returns PublicReadAndWriteProperties myObject : GetWritableProperties ()","title":"GetWritableProperties"},{"location":"DeusFramework/Classes/baseObject/#serialize","text":"myObject : Serialize ()","title":"Serialize"},{"location":"DeusFramework/Classes/baseObject/#hash","text":"myObject : Hash ()","title":"Hash"},{"location":"DeusFramework/Classes/baseObject/#properties","text":"Permission Type Name Description ReadOnly String ClassName Name of class ReadOnly String Superclass Class object is extended from ReadOnly Boolean Extendable If object can be inherited from ReadOnly String ObjectId UUID of object ReadOnly Number TickCreated Time object was created (On objects replicated across server/client boundary the time will be in server time) ReadOnly userdata Proxy Object's proxy limited to external access (Inherited from TableProxy )","title":"Properties"},{"location":"DeusFramework/Classes/Events/bindableEvent/","text":"BindableEvent An event object that behaves more similar to a Roblox object's event. This implementation also allows userdata types often made from newproxy() to be sent as arguments. new Returns a new BindableEvent local bindableEvent = BindableEvent . new () Connect Returns a connection that can be disconnected local connection = BindableEvent : Connect ( function () end ) connection : Disconnect () Wait Returns the arguments the next time the event fires local args = { BindableEvent : Wait ()} Fire Internal Access Required BindableEvent : Fire (...)","title":"BindableEvent"},{"location":"DeusFramework/Classes/Events/bindableEvent/#bindableevent","text":"An event object that behaves more similar to a Roblox object's event. This implementation also allows userdata types often made from newproxy() to be sent as arguments.","title":"BindableEvent"},{"location":"DeusFramework/Classes/Events/bindableEvent/#new","text":"Returns a new BindableEvent local bindableEvent = BindableEvent . new ()","title":"new"},{"location":"DeusFramework/Classes/Events/bindableEvent/#connect","text":"Returns a connection that can be disconnected local connection = BindableEvent : Connect ( function () end ) connection : Disconnect ()","title":"Connect"},{"location":"DeusFramework/Classes/Events/bindableEvent/#wait","text":"Returns the arguments the next time the event fires local args = { BindableEvent : Wait ()}","title":"Wait"},{"location":"DeusFramework/Classes/Events/bindableEvent/#fire","text":"Internal Access Required BindableEvent : Fire (...)","title":"Fire"},{"location":"DeusFramework/Classes/Events/remoteEvent/","text":"RemoteEvent Inherited from BaseObject new When used on the Server the 1st argument should be the RemoteEvent's name, the 2nd argument is the parent local remoteEvent = RemoteEvent . new ( \"RemoteEventName\" , workspace ) When used on the Client the only argument should be a Roblox RemoteEvent instance local remoteEvent = RemoteEvent . new ( workspace . RemoteEventName ) Connect When used on the Server this behaves like OnServerEvent:Connect() and when used on the Client it behaves like OnClientEvent:Connect() local connection = remoteEvent : Connect ( function (...) -- On the server this would print the Player print ({...}[ 1 ]) end ) connection : Disconnect () Fire Internal Access Required When used on the Server this behaves like FireClient() and when used on the Client it behaves like FireServer() -- Server remoteEvent : Fire ( player , ...) -- Client remoteEvent : Fire (...) FireAllClients Internal Access Required This method can only be used on the Server and behaves like FireAllClients() remoteEvent : FireAllClients (...) FireWhitelistedClients Internal Access Required This method can only be used on the Server and fires the event for all players in a list remoteEvent : FireWhitelistedClients ({ player1 , player2 , player3 }, ...)","title":"RemoteEvent"},{"location":"DeusFramework/Classes/Events/remoteEvent/#remoteevent","text":"Inherited from BaseObject","title":"RemoteEvent"},{"location":"DeusFramework/Classes/Events/remoteEvent/#new","text":"When used on the Server the 1st argument should be the RemoteEvent's name, the 2nd argument is the parent local remoteEvent = RemoteEvent . new ( \"RemoteEventName\" , workspace ) When used on the Client the only argument should be a Roblox RemoteEvent instance local remoteEvent = RemoteEvent . new ( workspace . RemoteEventName )","title":"new"},{"location":"DeusFramework/Classes/Events/remoteEvent/#connect","text":"When used on the Server this behaves like OnServerEvent:Connect() and when used on the Client it behaves like OnClientEvent:Connect() local connection = remoteEvent : Connect ( function (...) -- On the server this would print the Player print ({...}[ 1 ]) end ) connection : Disconnect ()","title":"Connect"},{"location":"DeusFramework/Classes/Events/remoteEvent/#fire","text":"Internal Access Required When used on the Server this behaves like FireClient() and when used on the Client it behaves like FireServer() -- Server remoteEvent : Fire ( player , ...) -- Client remoteEvent : Fire (...)","title":"Fire"},{"location":"DeusFramework/Classes/Events/remoteEvent/#fireallclients","text":"Internal Access Required This method can only be used on the Server and behaves like FireAllClients() remoteEvent : FireAllClients (...)","title":"FireAllClients"},{"location":"DeusFramework/Classes/Events/remoteEvent/#firewhitelistedclients","text":"Internal Access Required This method can only be used on the Server and fires the event for all players in a list remoteEvent : FireWhitelistedClients ({ player1 , player2 , player3 }, ...)","title":"FireWhitelistedClients"},{"location":"DeusFramework/Classes/Events/remoteFunction/","text":"RemoteFunction Inherited from BaseObject new When used on the Server the 1st argument should be the RemoteEvent's name, the 2nd argument is the parent local remoteFunction = RemoteFunction . new ( \"RemoteFunctionName\" , workspace ) When used on the Client the only argument should be a Roblox RemoteEvent instance local remoteFunction = RemoteFunction . new ( workspace . RemoteFunctionName ) OnInvoke Internal Access Required When used on the Server this behaves like OnServerInvoke() and when used on the Client it behaves like OnClientInvoke() remoteFunction : OnInvoke ( function (...) -- On the server this would return the player return {...}[ 1 ] end Invoke When used on the Server this behaves like InvokeClient() and when used on the Client it behaves like InvokeServer() -- Server local result = remoteFunction : Invoke ( player , ...) -- Client local result = remoteFunction : Invoke (...)","title":"RemoteFunction"},{"location":"DeusFramework/Classes/Events/remoteFunction/#remotefunction","text":"Inherited from BaseObject","title":"RemoteFunction"},{"location":"DeusFramework/Classes/Events/remoteFunction/#new","text":"When used on the Server the 1st argument should be the RemoteEvent's name, the 2nd argument is the parent local remoteFunction = RemoteFunction . new ( \"RemoteFunctionName\" , workspace ) When used on the Client the only argument should be a Roblox RemoteEvent instance local remoteFunction = RemoteFunction . new ( workspace . RemoteFunctionName )","title":"new"},{"location":"DeusFramework/Classes/Events/remoteFunction/#oninvoke","text":"Internal Access Required When used on the Server this behaves like OnServerInvoke() and when used on the Client it behaves like OnClientInvoke() remoteFunction : OnInvoke ( function (...) -- On the server this would return the player return {...}[ 1 ] end","title":"OnInvoke"},{"location":"DeusFramework/Classes/Events/remoteFunction/#invoke","text":"When used on the Server this behaves like InvokeClient() and when used on the Client it behaves like InvokeServer() -- Server local result = remoteFunction : Invoke ( player , ...) -- Client local result = remoteFunction : Invoke (...)","title":"Invoke"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/","text":"KeyboardInput Inherited from BaseObject Client-only KeyboardInputs serve as a wrapper for a single KeyCode they are easy to re-map as a result you should have a separate KeyboardInput for each action such as jumping, walking forwards, backwards, etc. Constructing -- Example of a KeyboardInput for walking forward local walkForward = KeyboardInput . new ( Enum . KeyCode . W ) -- Example of a KeyboardInput for sprinting forward forward as it requires shift to be pressed for it to fire local sprintForward = KeyboardInput . new ( Enum . KeyCode . W , true ) Enable Internal Access Required Re-connects internal connections to handle events. keyboardInput : Enable () Disable Internal Access Required Disconnects internal connections to handle events. keyboardInput : Disable () Events All event callbacks have an InputObject as their first and only argument. Began keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput began\" ) end ) Ended keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput ended\" ) end ) Changed keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput changed\" ) end ) Read-only Properties Name Description Active Boolean tells if the user is currently pressing the required keys Read-write Properties Name Description Shift Boolean decides if shift needs to be down for any events to fire KeyCode Enum.KeyCode KeyCode","title":"KeyboardInput"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#keyboardinput","text":"Inherited from BaseObject Client-only KeyboardInputs serve as a wrapper for a single KeyCode they are easy to re-map as a result you should have a separate KeyboardInput for each action such as jumping, walking forwards, backwards, etc.","title":"KeyboardInput"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#constructing","text":"-- Example of a KeyboardInput for walking forward local walkForward = KeyboardInput . new ( Enum . KeyCode . W ) -- Example of a KeyboardInput for sprinting forward forward as it requires shift to be pressed for it to fire local sprintForward = KeyboardInput . new ( Enum . KeyCode . W , true )","title":"Constructing"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#enable","text":"Internal Access Required Re-connects internal connections to handle events. keyboardInput : Enable ()","title":"Enable"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#disable","text":"Internal Access Required Disconnects internal connections to handle events. keyboardInput : Disable ()","title":"Disable"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#events","text":"All event callbacks have an InputObject as their first and only argument.","title":"Events"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#began","text":"keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput began\" ) end )","title":"Began"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#ended","text":"keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput ended\" ) end )","title":"Ended"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#changed","text":"keyboardInput . Began : Connect ( function ( inputObject ) print ( \"KeyboardInput changed\" ) end )","title":"Changed"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#read-only-properties","text":"Name Description Active Boolean tells if the user is currently pressing the required keys","title":"Read-only Properties"},{"location":"DeusFramework/Classes/UserInput/keyboardInput/#read-write-properties","text":"Name Description Shift Boolean decides if shift needs to be down for any events to fire KeyCode Enum.KeyCode KeyCode","title":"Read-write Properties"},{"location":"DeusFramework/Classes/UserInput/mouseInput/","text":"MouseInput Inherited from BaseObject Client-only This is the replacement for Roblox's deprecated Mouse class. Enable Internal Access Required Re-connects internal connections to handle events. mouseInput : Enable () Disable Internal Access Required Disconnects internal connections to handle events. mouseInput : Disable () Events All event callbacks have an InputObject as their first and only argument. Move Fires when the mouse moves. mouseInput . Move : Connect ( function ( inputObject ) print ( \"Move\" ) end ) Button1Down Fires when the left-mouse button is depressed. mouseInput . Button1Down : Connect ( function ( inputObject ) print ( \"Button1Down\" ) end ) Button1Up Fires when the left-mouse button is raised. mouseInput . Button1Up : Connect ( function ( inputObject ) print ( \"Button1Up\" ) end ) Button2Down Fires when the right-mouse button is depressed. mouseInput . Button2Down : Connect ( function ( inputObject ) print ( \"Button2Down\" ) end ) Button2Up Fires when the right-mouse button is raised. mouseInput . Button2Up : Connect ( function ( inputObject ) print ( \"Button2Up\" ) end ) Button3Down Fires when the middle-mouse button (scroll-wheel) is depressed. mouseInput . Button3Down : Connect ( function ( inputObject ) print ( \"Button3Down\" ) end ) Button3Up Fires when the middle-mouse button (scroll-wheel) is raised. mouseInput . Button3Up : Connect ( function ( inputObject ) print ( \"Button3Up\" ) end ) WheelBackward Fires when the scroll-wheel rolls backwards. mouseInput . WheelBackward : Connect ( function ( inputObject ) print ( \"WheelBackward\" ) end ) WheelForward Fires when the scroll-wheel rolls forward. mouseInput . WheelForward : Connect ( function ( inputObject ) print ( \"WheelForward\" ) end )","title":"MouseInput"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#mouseinput","text":"Inherited from BaseObject Client-only This is the replacement for Roblox's deprecated Mouse class.","title":"MouseInput"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#enable","text":"Internal Access Required Re-connects internal connections to handle events. mouseInput : Enable ()","title":"Enable"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#disable","text":"Internal Access Required Disconnects internal connections to handle events. mouseInput : Disable ()","title":"Disable"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#events","text":"All event callbacks have an InputObject as their first and only argument.","title":"Events"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#move","text":"Fires when the mouse moves. mouseInput . Move : Connect ( function ( inputObject ) print ( \"Move\" ) end )","title":"Move"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button1down","text":"Fires when the left-mouse button is depressed. mouseInput . Button1Down : Connect ( function ( inputObject ) print ( \"Button1Down\" ) end )","title":"Button1Down"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button1up","text":"Fires when the left-mouse button is raised. mouseInput . Button1Up : Connect ( function ( inputObject ) print ( \"Button1Up\" ) end )","title":"Button1Up"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button2down","text":"Fires when the right-mouse button is depressed. mouseInput . Button2Down : Connect ( function ( inputObject ) print ( \"Button2Down\" ) end )","title":"Button2Down"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button2up","text":"Fires when the right-mouse button is raised. mouseInput . Button2Up : Connect ( function ( inputObject ) print ( \"Button2Up\" ) end )","title":"Button2Up"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button3down","text":"Fires when the middle-mouse button (scroll-wheel) is depressed. mouseInput . Button3Down : Connect ( function ( inputObject ) print ( \"Button3Down\" ) end )","title":"Button3Down"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#button3up","text":"Fires when the middle-mouse button (scroll-wheel) is raised. mouseInput . Button3Up : Connect ( function ( inputObject ) print ( \"Button3Up\" ) end )","title":"Button3Up"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#wheelbackward","text":"Fires when the scroll-wheel rolls backwards. mouseInput . WheelBackward : Connect ( function ( inputObject ) print ( \"WheelBackward\" ) end )","title":"WheelBackward"},{"location":"DeusFramework/Classes/UserInput/mouseInput/#wheelforward","text":"Fires when the scroll-wheel rolls forward. mouseInput . WheelForward : Connect ( function ( inputObject ) print ( \"WheelForward\" ) end )","title":"WheelForward"},{"location":"DeusFramework/Data/dataType/","text":"DataType Info Documentation for this page is a work in progress. Similar to BaseObject but used to store data.","title":"DataType"},{"location":"DeusFramework/Data/dataType/#datatype","text":"Info Documentation for this page is a work in progress. Similar to BaseObject but used to store data.","title":"DataType"},{"location":"DeusFramework/Libraries/JSON/","text":"JSON Library to expand HttpService's JSON capabilities. Provides support for these data types. Vector2 Vector3 CFrame Color3 BrickColor serialize Example Script print ( JSON . serialize ( { a = Vector2 . new ( 3 , 5 ), b = Vector3 . new ( 3 , 5 , 7 ), c = CFrame . new ( 3 , 5 , 7 ), d = Color3 . new ( 1 , 1 , 1 ), e = BrickColor . new ( \"Bright red\" ) } )) Output {\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}} deserialize Example Script print ( JSON . deserialize ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output { a = 3, 5, b = 3, 5, 7, c = 3, 5, 7, d = 1, 1, 1, e = Bright red } isJSON Example Script print ( JSON . isJSON ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output true","title":"JSON"},{"location":"DeusFramework/Libraries/JSON/#json","text":"Library to expand HttpService's JSON capabilities. Provides support for these data types. Vector2 Vector3 CFrame Color3 BrickColor","title":"JSON"},{"location":"DeusFramework/Libraries/JSON/#serialize","text":"Example Script print ( JSON . serialize ( { a = Vector2 . new ( 3 , 5 ), b = Vector3 . new ( 3 , 5 , 7 ), c = CFrame . new ( 3 , 5 , 7 ), d = Color3 . new ( 1 , 1 , 1 ), e = BrickColor . new ( \"Bright red\" ) } )) Output {\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}","title":"serialize"},{"location":"DeusFramework/Libraries/JSON/#deserialize","text":"Example Script print ( JSON . deserialize ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output { a = 3, 5, b = 3, 5, 7, c = 3, 5, 7, d = 1, 1, 1, e = Bright red }","title":"deserialize"},{"location":"DeusFramework/Libraries/JSON/#isjson","text":"Example Script print ( JSON . isJSON ( '{\"d\":{\"_TYPE\":4,\"_DATA\":[1,1,1]},\"e\":{\"_TYPE\":5,\"_DATA\":\"Bright red\"},\"b\":{\"_TYPE\":2,\"_DATA\":[3,5,7]},\"c\":{\"_TYPE\":3,\"_DATA\":[3,5,7,1,0,0,0,1,0,0,0,1]},\"a\":{\"_TYPE\":1,\"_DATA\":[3,5]}}' )) Output true","title":"isJSON"},{"location":"DeusFramework/Libraries/adornmentUtils/","text":"AdornmentUtils Valid Classes AdornmentUtils only supports these classes ClassName BoxHandleAdornment ConeHandleAdornment CylinderHandleAdornment LineHandleAdornment SphereHandleAdornment ImageHandleAdornment Usage Argument Description string ClassName ClassName of adornment Instance Parent Parent CFrame CFrame CFrame bool IsWorldSpace If CFrame is WorldSpace, if false and Parent is provided ToObjectSpace() will be used on CFrame table Properties Table of properties Example AdornmentUtils . make ( \"BoxHandleAdornment\" , workspace , CFrame . new (), true , {})","title":"AdornmentUtils"},{"location":"DeusFramework/Libraries/adornmentUtils/#adornmentutils","text":"","title":"AdornmentUtils"},{"location":"DeusFramework/Libraries/adornmentUtils/#valid-classes","text":"AdornmentUtils only supports these classes ClassName BoxHandleAdornment ConeHandleAdornment CylinderHandleAdornment LineHandleAdornment SphereHandleAdornment ImageHandleAdornment","title":"Valid Classes"},{"location":"DeusFramework/Libraries/adornmentUtils/#usage","text":"Argument Description string ClassName ClassName of adornment Instance Parent Parent CFrame CFrame CFrame bool IsWorldSpace If CFrame is WorldSpace, if false and Parent is provided ToObjectSpace() will be used on CFrame table Properties Table of properties Example AdornmentUtils . make ( \"BoxHandleAdornment\" , workspace , CFrame . new (), true , {})","title":"Usage"},{"location":"DeusFramework/Libraries/enumeration/","text":"Enumeration Behaves like Enum and can be indexed for EnumItems addEnumItem Enumeration . addEnumItem ( \"EnumName\" , \"EnumItemName\" , number ) addEnum Enumeration . addEnum ( \"EnumName\" , { EnumItemName = number }) waitForEnum Yields for 3 seconds before erroring local enum = Enumeration . waitForEnum ( \"EnumName\" )","title":"Enumeration"},{"location":"DeusFramework/Libraries/enumeration/#enumeration","text":"Behaves like Enum and can be indexed for EnumItems","title":"Enumeration"},{"location":"DeusFramework/Libraries/enumeration/#addenumitem","text":"Enumeration . addEnumItem ( \"EnumName\" , \"EnumItemName\" , number )","title":"addEnumItem"},{"location":"DeusFramework/Libraries/enumeration/#addenum","text":"Enumeration . addEnum ( \"EnumName\" , { EnumItemName = number })","title":"addEnum"},{"location":"DeusFramework/Libraries/enumeration/#waitforenum","text":"Yields for 3 seconds before erroring local enum = Enumeration . waitForEnum ( \"EnumName\" )","title":"waitForEnum"},{"location":"DeusFramework/Libraries/instanceUtils/","text":"InstanceUtils Loading local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local InstanceUtils = Deus : Load ( \"Deus.InstanceUtils\" ) anchor Recursive anchor function. -- This anchors everything in the workspace InstanceUtils . anchor ( workspace , true ) -- This unanchors everything in the workspace InstanceUtils . anchor ( workspace , false ) getAncestors Returns all ancestors. Example Script print ( InstanceUtils . getAncestors ( workspace . Baseplate )) Output Depending on the name of your studio file it may not appear as \"Baseplate\" { Workspace, Baseplate } findFirstAncestorWithName Returns first ancestor with matching name. Example Script print ( InstanceUtils . findFirstAncestorWithName ( workspace . Baseplate , \"Workspace\" ) == workspace ) Output true findFirstChildNoCase Similar to FindFirstChild but disregards case sensitivity. InstanceUtils . findFirstChildNoCase ( instance , name , recursive ) findFirstChildWithAttribute Similar to FindFirstChild but checks for attributes . InstanceUtils . findFirstChildWithAttribute ( instance , attributeName , recursive ) findFirstAncestorWithAttribute Similar to findFirstChildWithAttribute but checks for ancestors. InstanceUtils . findFirstAncestorWithAttribute ( instance , attributeName ) setAttributes Sets multiple attributes at once. InstanceUtils . setAttributes ( workspace . Baseplate , { attribute1 = true , attribute2 = 2 , attribute3 = \"foobar\" } ) isTypeAttributeSupported Returns if a data type can be set as an attribute. Example Script print ( InstanceUtils . isTypeAttributeSupported ( \"nil\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"string\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"boolean\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"number\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"table\" )) Output true true true true false make Useful for creating lots of instances at once, for only a few instances it is reccomended to use Instance.new() -- Creates a model in workspace named \"Container\" with a 1x1x1 anchored part inside InstanceUtils . make ( { \"Model\" , { Name = \"Container\" }, workspace , { \"Part\" , { Anchored = true , Size = Vector3 . new ( 1 , 1 , 1 ) } } } )","title":"InstanceUtils"},{"location":"DeusFramework/Libraries/instanceUtils/#instanceutils","text":"","title":"InstanceUtils"},{"location":"DeusFramework/Libraries/instanceUtils/#loading","text":"local Deus = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Deus\" )) local InstanceUtils = Deus : Load ( \"Deus.InstanceUtils\" )","title":"Loading"},{"location":"DeusFramework/Libraries/instanceUtils/#anchor","text":"Recursive anchor function. -- This anchors everything in the workspace InstanceUtils . anchor ( workspace , true ) -- This unanchors everything in the workspace InstanceUtils . anchor ( workspace , false )","title":"anchor"},{"location":"DeusFramework/Libraries/instanceUtils/#getancestors","text":"Returns all ancestors. Example Script print ( InstanceUtils . getAncestors ( workspace . Baseplate )) Output Depending on the name of your studio file it may not appear as \"Baseplate\" { Workspace, Baseplate }","title":"getAncestors"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstancestorwithname","text":"Returns first ancestor with matching name. Example Script print ( InstanceUtils . findFirstAncestorWithName ( workspace . Baseplate , \"Workspace\" ) == workspace ) Output true","title":"findFirstAncestorWithName"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstchildnocase","text":"Similar to FindFirstChild but disregards case sensitivity. InstanceUtils . findFirstChildNoCase ( instance , name , recursive )","title":"findFirstChildNoCase"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstchildwithattribute","text":"Similar to FindFirstChild but checks for attributes . InstanceUtils . findFirstChildWithAttribute ( instance , attributeName , recursive )","title":"findFirstChildWithAttribute"},{"location":"DeusFramework/Libraries/instanceUtils/#findfirstancestorwithattribute","text":"Similar to findFirstChildWithAttribute but checks for ancestors. InstanceUtils . findFirstAncestorWithAttribute ( instance , attributeName )","title":"findFirstAncestorWithAttribute"},{"location":"DeusFramework/Libraries/instanceUtils/#setattributes","text":"Sets multiple attributes at once. InstanceUtils . setAttributes ( workspace . Baseplate , { attribute1 = true , attribute2 = 2 , attribute3 = \"foobar\" } )","title":"setAttributes"},{"location":"DeusFramework/Libraries/instanceUtils/#istypeattributesupported","text":"Returns if a data type can be set as an attribute. Example Script print ( InstanceUtils . isTypeAttributeSupported ( \"nil\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"string\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"boolean\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"number\" )) print ( InstanceUtils . isTypeAttributeSupported ( \"table\" )) Output true true true true false","title":"isTypeAttributeSupported"},{"location":"DeusFramework/Libraries/instanceUtils/#make","text":"Useful for creating lots of instances at once, for only a few instances it is reccomended to use Instance.new() -- Creates a model in workspace named \"Container\" with a 1x1x1 anchored part inside InstanceUtils . make ( { \"Model\" , { Name = \"Container\" }, workspace , { \"Part\" , { Anchored = true , Size = Vector3 . new ( 1 , 1 , 1 ) } } } )","title":"make"},{"location":"DeusFramework/Libraries/mathUtils/","text":"MathUtils phi The golden ratio Example Script print ( MathUtils . phi ) Output 1.6180339887499 ga The golden angle in radians Example Script -- Converted to degrees print ( math.deg ( MathUtils . ga )) Output 137.50776405004 isNaN Checks if a number is a number Example Script print ( MathUtils . isNaN ( tonumber ( \"NaN\" ))) print ( MathUtils . isNaN ( 10 )) Output true false round Similar to math.round() but allows you to decide nearest multiple to round to Example Script print ( MathUtils . round ( 3 , 5 )) print ( MathUtils . round ( 2 , 5 )) Output 5 0 ceil Similar to math.ceil() but allows you to decide nearest multiple to round up to Example Script print ( MathUtils . ceil ( 3 , 5 )) print ( MathUtils . ceil ( 2 , 5 )) Output 5 5 floor Similar to math.floor() but allows you to decide nearest multiple to round down to Example Script print ( MathUtils . floor ( 3 , 5 )) print ( MathUtils . floor ( 2 , 5 )) Output 0 0 lerp Interpolates between number , Vector3 , and CFrame Example Script print ( MathUtils . lerp ( 0 , 100 , 0.5 )) print ( MathUtils . lerp ( Vector3 . new (), Vector3 . new ( 100 , 100 , 100 ), 0.5 )) print ( MathUtils . lerp ( CFrame . new (), CFrame . new ( 100 , 100 , 100 ), 0.5 ). Position ) Output 50 50, 50, 50 50, 50, 50 factors Returns all factors of a number including 1 and itself Example Script print ( MathUtils . factors ( 21 )) Output 1, 3, 7, 21 isPrime Returns if a number is prime Example Script print ( MathUtils . isPrime ( 7 )) print ( MathUtils . isPrime ( 10 )) Output true false snap Returns the nearest number in a list Example Script print ( MathUtils . snap ( 35 , { 5 , 10 , 20 , 40 , 80 })) Output 40","title":"MathUtils"},{"location":"DeusFramework/Libraries/mathUtils/#mathutils","text":"","title":"MathUtils"},{"location":"DeusFramework/Libraries/mathUtils/#phi","text":"The golden ratio Example Script print ( MathUtils . phi ) Output 1.6180339887499","title":"phi"},{"location":"DeusFramework/Libraries/mathUtils/#ga","text":"The golden angle in radians Example Script -- Converted to degrees print ( math.deg ( MathUtils . ga )) Output 137.50776405004","title":"ga"},{"location":"DeusFramework/Libraries/mathUtils/#isnan","text":"Checks if a number is a number Example Script print ( MathUtils . isNaN ( tonumber ( \"NaN\" ))) print ( MathUtils . isNaN ( 10 )) Output true false","title":"isNaN"},{"location":"DeusFramework/Libraries/mathUtils/#round","text":"Similar to math.round() but allows you to decide nearest multiple to round to Example Script print ( MathUtils . round ( 3 , 5 )) print ( MathUtils . round ( 2 , 5 )) Output 5 0","title":"round"},{"location":"DeusFramework/Libraries/mathUtils/#ceil","text":"Similar to math.ceil() but allows you to decide nearest multiple to round up to Example Script print ( MathUtils . ceil ( 3 , 5 )) print ( MathUtils . ceil ( 2 , 5 )) Output 5 5","title":"ceil"},{"location":"DeusFramework/Libraries/mathUtils/#floor","text":"Similar to math.floor() but allows you to decide nearest multiple to round down to Example Script print ( MathUtils . floor ( 3 , 5 )) print ( MathUtils . floor ( 2 , 5 )) Output 0 0","title":"floor"},{"location":"DeusFramework/Libraries/mathUtils/#lerp","text":"Interpolates between number , Vector3 , and CFrame Example Script print ( MathUtils . lerp ( 0 , 100 , 0.5 )) print ( MathUtils . lerp ( Vector3 . new (), Vector3 . new ( 100 , 100 , 100 ), 0.5 )) print ( MathUtils . lerp ( CFrame . new (), CFrame . new ( 100 , 100 , 100 ), 0.5 ). Position ) Output 50 50, 50, 50 50, 50, 50","title":"lerp"},{"location":"DeusFramework/Libraries/mathUtils/#factors","text":"Returns all factors of a number including 1 and itself Example Script print ( MathUtils . factors ( 21 )) Output 1, 3, 7, 21","title":"factors"},{"location":"DeusFramework/Libraries/mathUtils/#isprime","text":"Returns if a number is prime Example Script print ( MathUtils . isPrime ( 7 )) print ( MathUtils . isPrime ( 10 )) Output true false","title":"isPrime"},{"location":"DeusFramework/Libraries/mathUtils/#snap","text":"Returns the nearest number in a list Example Script print ( MathUtils . snap ( 35 , { 5 , 10 , 20 , 40 , 80 })) Output 40","title":"snap"},{"location":"DeusFramework/Libraries/mouseUtils/","text":"MouseUtils Loading local MouseUtils = Deus : Load ( \"Deus.MouseUtils\" ). new () getTargetAtPosition Returns Instance at screen x and y coordinates or nil if raycast fails. Uses Enum.FilterType and a table for filterDescendantsInstances to control raycast. local target = MouseUtils . getTargetAtPosition ( x , y , filterType , filterDescendantsInstances ) getGuiObjectsAtPositionWithWhitelist Returns GuiObjects in filter if GuiObjects are at screen x and y coordinates. If recursive is enabled will count descendants of filter as part of whitelist. local guiObjects = MouseUtils . getGuiObjectsAtPositionWithWhitelist ( x , y , filter , recursive )","title":"MouseUtils"},{"location":"DeusFramework/Libraries/mouseUtils/#mouseutils","text":"","title":"MouseUtils"},{"location":"DeusFramework/Libraries/mouseUtils/#loading","text":"local MouseUtils = Deus : Load ( \"Deus.MouseUtils\" ). new ()","title":"Loading"},{"location":"DeusFramework/Libraries/mouseUtils/#gettargetatposition","text":"Returns Instance at screen x and y coordinates or nil if raycast fails. Uses Enum.FilterType and a table for filterDescendantsInstances to control raycast. local target = MouseUtils . getTargetAtPosition ( x , y , filterType , filterDescendantsInstances )","title":"getTargetAtPosition"},{"location":"DeusFramework/Libraries/mouseUtils/#getguiobjectsatpositionwithwhitelist","text":"Returns GuiObjects in filter if GuiObjects are at screen x and y coordinates. If recursive is enabled will count descendants of filter as part of whitelist. local guiObjects = MouseUtils . getGuiObjectsAtPositionWithWhitelist ( x , y , filter , recursive )","title":"getGuiObjectsAtPositionWithWhitelist"},{"location":"DeusFramework/Libraries/raycastUtils/","text":"RaycastUtils from Creates a RaycastParam from a dictionary local raycastParam = RaycastUtils . from ( { FilterDescendantsInstances = {}, FilterType = Enum . RaycastFilterType . Blacklist , IgnoreWater = false , CollisionGroup = \"Default\" } ) copy Returns a clone of a provided RaycastParam local raycastParam = RaycastUtils . copy ( raycastParams ) cast Performs a raycast, if raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . cast ( origin , direction , raycastParams ) castCollideOnly Repeats a raycast adding instances that have CanCollide off to its IgnoreList until the raycast does not hit an instance or the instance is CanCollide on. If raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . castCollideOnly ( origin , direction , raycastParams )","title":"RaycastUtils"},{"location":"DeusFramework/Libraries/raycastUtils/#raycastutils","text":"","title":"RaycastUtils"},{"location":"DeusFramework/Libraries/raycastUtils/#from","text":"Creates a RaycastParam from a dictionary local raycastParam = RaycastUtils . from ( { FilterDescendantsInstances = {}, FilterType = Enum . RaycastFilterType . Blacklist , IgnoreWater = false , CollisionGroup = \"Default\" } )","title":"from"},{"location":"DeusFramework/Libraries/raycastUtils/#copy","text":"Returns a clone of a provided RaycastParam local raycastParam = RaycastUtils . copy ( raycastParams )","title":"copy"},{"location":"DeusFramework/Libraries/raycastUtils/#cast","text":"Performs a raycast, if raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . cast ( origin , direction , raycastParams )","title":"cast"},{"location":"DeusFramework/Libraries/raycastUtils/#castcollideonly","text":"Repeats a raycast adding instances that have CanCollide off to its IgnoreList until the raycast does not hit an instance or the instance is CanCollide on. If raycastParams is not provided it will default to a global RaycastParam . local raycastResult = RaycastUtils . castCollideOnly ( origin , direction , raycastParams )","title":"castCollideOnly"},{"location":"DeusFramework/Libraries/stringUtils/","text":"StringUtils countMatches Returns count of pattern matches. Example Script print ( StringUtils . countMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output 2 matches Returns matches in a table with where the match starts and ends. Example Script print ( StringUtils . matches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output { { End = 3, Match = \"the\", Start = 1 }, { End = 34, Match = \"the\", Start = 32 } } replace Splices a new string into an existing string. Example Script print ( StringUtils . replace ( \"the quick brown fox jumps over the lazy dog\" , \"red cat\" , 11 , 19 )) Output the quick red cat jumps over the lazy dog collapse Replaces sequential pattern occurances with a single occurance. This is useful to remove double spaces in chat messages. Example Script print ( StringUtils . collapse ( \" i am spamming chat\" , \" \" )) Output There is still a space at the start of the string. i am spamming chat hash Uses the bytes in a string to generate a hash. Example Script print ( StringUtils . hash ( \"the quick brown fox jumps over the lazy dog\" )) Output 67114530 reverseSub Similar to string.sub() but instead starts at the end of a string instead of the front. Example Script print ( StringUtils . reverseSub ( \"the quick brown fox jumps over the lazy dog\" , 1 , 8 )) Output lazy dog","title":"StringUtils"},{"location":"DeusFramework/Libraries/stringUtils/#stringutils","text":"","title":"StringUtils"},{"location":"DeusFramework/Libraries/stringUtils/#countmatches","text":"Returns count of pattern matches. Example Script print ( StringUtils . countMatches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output 2","title":"countMatches"},{"location":"DeusFramework/Libraries/stringUtils/#matches","text":"Returns matches in a table with where the match starts and ends. Example Script print ( StringUtils . matches ( \"the quick brown fox jumps over the lazy dog\" , \"the\" )) Output { { End = 3, Match = \"the\", Start = 1 }, { End = 34, Match = \"the\", Start = 32 } }","title":"matches"},{"location":"DeusFramework/Libraries/stringUtils/#replace","text":"Splices a new string into an existing string. Example Script print ( StringUtils . replace ( \"the quick brown fox jumps over the lazy dog\" , \"red cat\" , 11 , 19 )) Output the quick red cat jumps over the lazy dog","title":"replace"},{"location":"DeusFramework/Libraries/stringUtils/#collapse","text":"Replaces sequential pattern occurances with a single occurance. This is useful to remove double spaces in chat messages. Example Script print ( StringUtils . collapse ( \" i am spamming chat\" , \" \" )) Output There is still a space at the start of the string. i am spamming chat","title":"collapse"},{"location":"DeusFramework/Libraries/stringUtils/#hash","text":"Uses the bytes in a string to generate a hash. Example Script print ( StringUtils . hash ( \"the quick brown fox jumps over the lazy dog\" )) Output 67114530","title":"hash"},{"location":"DeusFramework/Libraries/stringUtils/#reversesub","text":"Similar to string.sub() but instead starts at the end of a string instead of the front. Example Script print ( StringUtils . reverseSub ( \"the quick brown fox jumps over the lazy dog\" , 1 , 8 )) Output lazy dog","title":"reverseSub"},{"location":"DeusFramework/Libraries/symbol/","text":"Symbol Symbols are userdata represented by a name. Global symbols are created or obtained through Symbol.get() while Nonglobal symbols are created through Symbol.new() . Global and nonglobal symbols will not return the same if compared even if they have the same name. new Creates a symbol for a given string. local None = Symbol . new ( \"None\" ) Example Script print ( Symbol . new ( \"None\" ) == Symbol . new ( \"None\" )) local None = Symbol . new ( \"None\" ) print ( None == None ) Output false true get Creates a symbol for a given string or returns the symbol for that string if one already exists. local None = Symbol . get ( \"None\" ) Example Script print ( Symbol . get ( \"None\" ) == Symbol . get ( \"None\" )) print ( Symbol . get ( \"None\" ) == Symbol . new ( \"None\" )) Output true false","title":"Symbol"},{"location":"DeusFramework/Libraries/symbol/#symbol","text":"Symbols are userdata represented by a name. Global symbols are created or obtained through Symbol.get() while Nonglobal symbols are created through Symbol.new() . Global and nonglobal symbols will not return the same if compared even if they have the same name.","title":"Symbol"},{"location":"DeusFramework/Libraries/symbol/#new","text":"Creates a symbol for a given string. local None = Symbol . new ( \"None\" ) Example Script print ( Symbol . new ( \"None\" ) == Symbol . new ( \"None\" )) local None = Symbol . new ( \"None\" ) print ( None == None ) Output false true","title":"new"},{"location":"DeusFramework/Libraries/symbol/#get","text":"Creates a symbol for a given string or returns the symbol for that string if one already exists. local None = Symbol . get ( \"None\" ) Example Script print ( Symbol . get ( \"None\" ) == Symbol . get ( \"None\" )) print ( Symbol . get ( \"None\" ) == Symbol . new ( \"None\" )) Output true false","title":"get"},{"location":"DeusFramework/Libraries/vectorUtils/","text":"VectorUtils clamp Equivalent to math.clamp() but for Vector3 Example Script print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), 0 , 50 )) print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), nil , 50 )) print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), 0 )) Output 0, 50, 20 -100, 50, 20 0, 100, 20 llarToWorld Converts latitude, longitude, altitude (defaults to 0) into a unit and scales it by the radius (defaults to 1) Example Script print ( VectorUtils . llarToWorld ( 35.6762 , 139.6503 )) Output 0.0655324981, 0.431926399, 0.899524927 abs Equivalent to math.abs() but for Vector3 Example Script print ( VectorUtils . abs ( Vector3 . new ( - 1 , 10 , - 100 ))) Output 1, 10, 100 angle Returns the angle between 2 vectors in radians Example Script -- Converted to degrees print ( math.deg ( VectorUtils . angle ( Vector3 . new ( 1 , 0 , 0 ), Vector3 . new ( 0 , 0 , 1 )))) Output 90","title":"VectorUtils"},{"location":"DeusFramework/Libraries/vectorUtils/#vectorutils","text":"","title":"VectorUtils"},{"location":"DeusFramework/Libraries/vectorUtils/#clamp","text":"Equivalent to math.clamp() but for Vector3 Example Script print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), 0 , 50 )) print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), nil , 50 )) print ( VectorUtils . clamp ( Vector3 . new ( - 100 , 100 , 20 ), 0 )) Output 0, 50, 20 -100, 50, 20 0, 100, 20","title":"clamp"},{"location":"DeusFramework/Libraries/vectorUtils/#llartoworld","text":"Converts latitude, longitude, altitude (defaults to 0) into a unit and scales it by the radius (defaults to 1) Example Script print ( VectorUtils . llarToWorld ( 35.6762 , 139.6503 )) Output 0.0655324981, 0.431926399, 0.899524927","title":"llarToWorld"},{"location":"DeusFramework/Libraries/vectorUtils/#abs","text":"Equivalent to math.abs() but for Vector3 Example Script print ( VectorUtils . abs ( Vector3 . new ( - 1 , 10 , - 100 ))) Output 1, 10, 100","title":"abs"},{"location":"DeusFramework/Libraries/vectorUtils/#angle","text":"Returns the angle between 2 vectors in radians Example Script -- Converted to degrees print ( math.deg ( VectorUtils . angle ( Vector3 . new ( 1 , 0 , 0 ), Vector3 . new ( 0 , 0 , 1 )))) Output 90","title":"angle"},{"location":"DeusFramework/Libraries/Debug/output/","text":"Output Custom implementations of print , warn , error , and assert to make formatting error messages easier. print Output . print ( \"This script's name is %s and its path is %s\" , -- String Pattern { script . Name , script : GetFullName ()} -- List or anything that can be represented as a string ) warn Output . warn ( \"This is a warning without any formatting\" , -- String Pattern nil -- Nil in this case due to the pattern not needing any replacements ) error Output . error ( \"Expected table, instead got %s\" , -- String Pattern typeof ( x ), -- List or anything that can be represented as a string 1 -- Level (defaults to 0 if nil) ) assert Output . assert ( typeof ( x ) == \"table\" , -- Boolean, if true no error will be thrown \"Expected table, instead got %s\" , -- String Pattern typeof ( x ), -- List or anything that can be represented as a string 1 -- Level (defaults to 0 if nil) )","title":"Output"},{"location":"DeusFramework/Libraries/Debug/output/#output","text":"Custom implementations of print , warn , error , and assert to make formatting error messages easier.","title":"Output"},{"location":"DeusFramework/Libraries/Debug/output/#print","text":"Output . print ( \"This script's name is %s and its path is %s\" , -- String Pattern { script . Name , script : GetFullName ()} -- List or anything that can be represented as a string )","title":"print"},{"location":"DeusFramework/Libraries/Debug/output/#warn","text":"Output . warn ( \"This is a warning without any formatting\" , -- String Pattern nil -- Nil in this case due to the pattern not needing any replacements )","title":"warn"},{"location":"DeusFramework/Libraries/Debug/output/#error","text":"Output . error ( \"Expected table, instead got %s\" , -- String Pattern typeof ( x ), -- List or anything that can be represented as a string 1 -- Level (defaults to 0 if nil) )","title":"error"},{"location":"DeusFramework/Libraries/Debug/output/#assert","text":"Output . assert ( typeof ( x ) == \"table\" , -- Boolean, if true no error will be thrown \"Expected table, instead got %s\" , -- String Pattern typeof ( x ), -- List or anything that can be represented as a string 1 -- Level (defaults to 0 if nil) )","title":"assert"},{"location":"DeusFramework/Libraries/Debug/visualDebug/","text":"VisualDebug Debug library for 3D space. drawBox -- CFrame, Size (number), Color3 local boxAdornment = VisualDebug . drawBox ( CFrame . new ( 0 , 10 , 0 ), 10 , Color3 . fromRGB ( 60 , 120 , 240 )) drawSphere -- Position (Vector3), Radius (number), Color3 local sphereAdornment = VisualDebug . drawSphere ( Vector3 . new ( 0 , 10 , 0 ), 10 , Color3 . fromRGB ( 60 , 120 , 240 )) drawLine -- Start (Vector3), End (Vector3), Color3 local lineAdornment = VisualDebug . drawLine ( Vector3 . new ( 0 , 10 , 0 ), Vector3 . new ( 10 , 20 , 10 ), Color3 . fromRGB ( 60 , 120 , 240 )) drawPath -- Points (table), Radius (number), Color3 local pathAdornmentFolder = VisualDebug . drawPath ( points , 1 , Color3 . fromRGB ( 60 , 120 , 240 )) drawArrow -- Start (Vector3), Direction (Vector3), Radius(number), Color3 local arrowAdornmentFolder = VisualDebug . drawArrow ( Vector3 . new ( 0 , 10 , 0 ), Vector3 . new ( 0 , 10 , 0 ), 1 , Color3 . fromRGB ( 60 , 120 , 240 ))","title":"VisualDebug"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#visualdebug","text":"Debug library for 3D space.","title":"VisualDebug"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#drawbox","text":"-- CFrame, Size (number), Color3 local boxAdornment = VisualDebug . drawBox ( CFrame . new ( 0 , 10 , 0 ), 10 , Color3 . fromRGB ( 60 , 120 , 240 ))","title":"drawBox"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#drawsphere","text":"-- Position (Vector3), Radius (number), Color3 local sphereAdornment = VisualDebug . drawSphere ( Vector3 . new ( 0 , 10 , 0 ), 10 , Color3 . fromRGB ( 60 , 120 , 240 ))","title":"drawSphere"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#drawline","text":"-- Start (Vector3), End (Vector3), Color3 local lineAdornment = VisualDebug . drawLine ( Vector3 . new ( 0 , 10 , 0 ), Vector3 . new ( 10 , 20 , 10 ), Color3 . fromRGB ( 60 , 120 , 240 ))","title":"drawLine"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#drawpath","text":"-- Points (table), Radius (number), Color3 local pathAdornmentFolder = VisualDebug . drawPath ( points , 1 , Color3 . fromRGB ( 60 , 120 , 240 ))","title":"drawPath"},{"location":"DeusFramework/Libraries/Debug/visualDebug/#drawarrow","text":"-- Start (Vector3), Direction (Vector3), Radius(number), Color3 local arrowAdornmentFolder = VisualDebug . drawArrow ( Vector3 . new ( 0 , 10 , 0 ), Vector3 . new ( 0 , 10 , 0 ), 1 , Color3 . fromRGB ( 60 , 120 , 240 ))","title":"drawArrow"},{"location":"DeusFramework/Libraries/Tables/proxy/","text":"Proxy Userdata constructor similar to newproxy() new -- Creates a userdata with the index \"foo\" equal to \"bar\" local userdata = Proxy . new ( { foo = \"bar\" }, { -- Set metamethods here } ) Metamethods Warning The metamethods __eq , __lt , and __le do not work These metamethods can be set in the 2nd argument of Proxy.new() Name __metatable __index __newindex __tostring __call __concat __unm __add __sub __mul __div __mod __pow __len For more details refer to the Developer Hub","title":"Proxy"},{"location":"DeusFramework/Libraries/Tables/proxy/#proxy","text":"Userdata constructor similar to newproxy()","title":"Proxy"},{"location":"DeusFramework/Libraries/Tables/proxy/#new","text":"-- Creates a userdata with the index \"foo\" equal to \"bar\" local userdata = Proxy . new ( { foo = \"bar\" }, { -- Set metamethods here } )","title":"new"},{"location":"DeusFramework/Libraries/Tables/proxy/#metamethods","text":"Warning The metamethods __eq , __lt , and __le do not work These metamethods can be set in the 2nd argument of Proxy.new() Name __metatable __index __newindex __tostring __call __concat __unm __add __sub __mul __div __mod __pow __len For more details refer to the Developer Hub","title":"Metamethods"},{"location":"DeusFramework/Libraries/Tables/tableUtils/","text":"TableUtils Libray to expand Luau's table methods Loading local TableUtils = Deus : Load ( \"Deus.TableUtils\" ). new () Methods Name Arguments Returns shallowCopy table Table Copy of all key-values stored with a numbered key deepCopy table Table Copy of all key-values getKeys table Table Array of keys getValues table Table Array of values merge tuple Tables Combines all tables into a new table unpack tuple Tables Unpacks multiple tables in order remove variant Value Removes the given value in a table sub table Table, number IndexStart, number IndexEnd Returns key-values stored with a numbered key between IndexStart and IndexEnd sum table Table Returns the sum of an array of number , Vector2 , or Vector3 values average table Table Returns the average of an array of number , Vector2 , or Vector3 values instanceAsIndex Instance Instance Allows an instance to behave like the __index of a table instanceAsNewIndex Instance Instance Allows an instance to behave like the __newindex ofa table","title":"TableUtils"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#tableutils","text":"Libray to expand Luau's table methods","title":"TableUtils"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#loading","text":"local TableUtils = Deus : Load ( \"Deus.TableUtils\" ). new ()","title":"Loading"},{"location":"DeusFramework/Libraries/Tables/tableUtils/#methods","text":"Name Arguments Returns shallowCopy table Table Copy of all key-values stored with a numbered key deepCopy table Table Copy of all key-values getKeys table Table Array of keys getValues table Table Array of values merge tuple Tables Combines all tables into a new table unpack tuple Tables Unpacks multiple tables in order remove variant Value Removes the given value in a table sub table Table, number IndexStart, number IndexEnd Returns key-values stored with a numbered key between IndexStart and IndexEnd sum table Table Returns the sum of an array of number , Vector2 , or Vector3 values average table Table Returns the average of an array of number , Vector2 , or Vector3 values instanceAsIndex Instance Instance Allows an instance to behave like the __index of a table instanceAsNewIndex Instance Instance Allows an instance to behave like the __newindex ofa table","title":"Methods"}]}